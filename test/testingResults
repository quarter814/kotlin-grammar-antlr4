Testing AbsentInnerType.kt...
line 1:9 no viable alternative at input '()?'
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x) : (type ( ) ?)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))

Testing AnonymousInitializer.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Foo) (classBody { \n \n (classMemberDeclaration (anonymousInitializer init (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier c)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))))))) (semi \n) })) (semi \n \n)) }))) (semi \n \n)))

Testing AssertNotNull.kt...
line 6:11 no viable alternative at input 'true!!!\n'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier main)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier args) : (type (typeReference (userType (simpleUserType (simpleIdentifier Array) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) >)))))) )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (prefixUnaryOperator !) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (prefixUnaryOperator !) (prefixUnaryOperator !) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \n) true ! ! !)))) (semi \n)))

Testing BabySteps.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Runnable) (typeParameters < (typeParameter (simpleIdentifier a)) , (typeParameter (simpleIdentifier a)) >) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier doo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0))))))))))))))))))) )) (delegationSpecifiers : (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier foo))) (callSuffix (valueArguments ( (valueArgument (simpleIdentifier d) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0)))))))))))))))))) ))))) , (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier bar))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))))) , (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier bar))) (callSuffix (annotatedLambda (functionLiteral { \n \n })))))) \n))))

Testing BabySteps_ERR.kt...
line 3:45 extraneous input ',' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Runnable) (typeParameters < (typeParameter (simpleIdentifier a)) , (typeParameter (simpleIdentifier a)) >) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier doo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0))))))))))))))))))) )) (delegationSpecifiers : (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier foo))) (callSuffix (valueArguments ( (valueArgument (simpleIdentifier d) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0)))))))))))))))))) ))))) , , (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier bar))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))))) , (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier bar))) (callSuffix (annotatedLambda (functionLiteral { \n \n })))))) \n))))

Testing BackslashInString.kt...
line 4:0 no viable alternative at input '"\\n}\n'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n " \\n }\n))))))

Testing BlockCommentAtBeginningOfFile1.kt...
(kotlinFile preamble)

Testing BlockCommentAtBeginningOfFile2.kt...
(kotlinFile preamble)

Testing BlockCommentAtBeginningOfFile3.kt...
(kotlinFile preamble)

Testing BlockCommentAtBeginningOfFile4.kt...
(kotlinFile (preamble \n \n))

Testing BlockCommentUnmatchedClosing_ERR.kt...
line 2:4 no viable alternative at input '\n*'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) (functionBody (block {)))) (semi \n)))

Testing ByClauses.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5)))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) ))))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) ]))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { }))))))))))))))))))) ))))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (objectLiteral object (classBody { \n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { }))))))))))))))))))))) (semi \n)) }))))))))))))))))))))) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \n)) })))))

Testing CallsInWhen.kt...
line 10:8 no viable alternative at input 'when(a){\na.foo->a\na.foo()->a\na.foo<T>->a\na.foo<T>(a)->a\na.foo<T>(a,d)->a\na.{bar}->a\na.{!bar}->a\na.{->'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n when ( a ) {)))) (semi \n)))

Testing CallWithManyClosures.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier A))))) >) (valueArguments ( )) (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { }))))))))))))))))))))))

Testing CollectionLiterals.kt...
line 2:4 no viable alternative at input '\n['
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block {)))) (semi \n)))

Testing CollectionLiterals_ERR.kt...
line 2:4 no viable alternative at input '\n['
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block {)))) (semi \n)))

Testing CommentsBinding.kt...
(kotlinFile (preamble \n (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar))) (semi \n \n) (importHeader import (identifier (simpleIdentifier java) . (simpleIdentifier util)) . *) (semi \n) (importHeader import (identifier (simpleIdentifier javax)) . *) (semi \n \n \n) (importHeader import (identifier (simpleIdentifier a) . (simpleIdentifier b))) (semi \n) (importHeader import (identifier (simpleIdentifier c) . (simpleIdentifier d))) (semi \n \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { }))) (semi \n \n \n \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { }))) (semi \n \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier C) \n \n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier D) (classBody { \n \n (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier v1)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n \n)))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier v2)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))))))))))) (semi \n \n \n)))) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier p1) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) , (functionValueParameter (parameter (simpleIdentifier p2) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) , (functionValueParameter (parameter (simpleIdentifier p3) : (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) ))))))))))))))))))) )) (functionBody (block { \n \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier local)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) (semi \n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier localFun)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))) (semi \n \n) (statement (declaration (localClassDeclaration (classDeclaration class (simpleIdentifier Local) (classBody { }))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n) })))) (semi \n \n \n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { \n }))) (semi \n)) }))) (semi \n \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier v)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n \n \n)))) (topLevelObject (topFunctionDeclaration (visibilityModifier public) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier local)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier local2)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier E) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier A)) , \n (enumEntry (simpleIdentifier B)) , \n (enumEntry (simpleIdentifier C)) , \n \n (enumEntry (simpleIdentifier X) (enumEntryBody { \n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier toString)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent X) "))))))))))))))))))))) (semi \n)) })) \n) }))) (semi \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier prop) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))) \n (setter set ( (simpleIdentifier value) ) (functionBody (block { }))))) (semi \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier prop2) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) (getter get)))))

Testing CommentsBindingInLambda.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la1)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n \n \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n \n \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n \n \n) }))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la2)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n \n }))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la3)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n \n }))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la4)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n \n \n \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier some)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \n) }))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la5)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n \n \n }))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la6)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a))) -> \n }))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier la7)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { }))))))))))))))))) (semi \n \n)))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing CommentsBindingInStatementBlock.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))))) ) (controlStructureBody (block { })) (semi \n)))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))))) ) (controlStructureBody (block { \n \n })) (semi \n)))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))))) ) (controlStructureBody (block { \n \n \n })) (semi \n)))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))))) ) (controlStructureBody (block { \n \n \n \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 12))))))))))))))))) (semi \n \n))))) (semi \n) }))))))))))))))))))))) (semi \n) }))))))

Testing Constructors.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \n }))) (semi \n \n)) (topLevelObject (topClassDeclaration (visibilityModifier public) (classDeclaration class (simpleIdentifier foo) (primaryConstructor ( )) (delegationSpecifiers : (delegationSpecifier (userType (simpleUserType (simpleIdentifier Bar))))) \n))))

Testing ControlStructures.kt...
line 3:25 no viable alternative at input 'throwFoo(),'
(kotlinFile (preamble \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation throw Foo ())))))) ))))))

Testing DefaultKeyword.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { \n \n }))) (semi \n)) }))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object \n \n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n)))) }))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (visibilityModifier public) (companionObject companion object (simpleIdentifier A) (classBody { \n \n }))) (semi \n)) }))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier A) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { \n }))) (semi \n)) }))) (semi \n)) }))) (semi \n \n)))

Testing destructuringInLambdas.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a1) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) -> }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a2) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) ))) -> }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a3) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier z))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) -> }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a4) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) , (lambdaParameter (variableDeclaration (simpleIdentifier z))) -> }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a5) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier q))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) , (lambdaParameter (variableDeclaration (simpleIdentifier z))) -> }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a6) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier z)) , (variableDeclaration (simpleIdentifier w)) ))) -> }))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a7) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Type)))))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier z) : (type (typeReference (userType (simpleUserType (simpleIdentifier Type)))))) ))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier w)) , (variableDeclaration (simpleIdentifier u) : (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier V)))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo7)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) }))))))))))))))))))) (semi \n) })))) (semi \n)))

Testing destructuringInLambdas_ERR.kt...
line 2:19 no viable alternative at input 'a8.filter{((x,'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n a8 . filter { ( ( x , y ) , z ) -> foo8 ( ) })))) (semi \n)))

Testing DocCommentAfterFileAnnotations.kt...
(kotlinFile (preamble (fileAnnotation @file : [ (unescapedAnnotation (identifier (simpleIdentifier Volatile))) ]) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier C) (classBody { })))))

Testing DocCommentForFirstDeclaration.kt...
(kotlinFile (preamble \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { }))))))

Testing DocCommentOnPackageDirectiveLine.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier p1) . (simpleIdentifier p2))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { }))))))

Testing DocCommentsBinding.kt...
(kotlinFile (preamble \n \n) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier p) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (classBody { \n \n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n \n (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier localFoo)) (functionValueParameters ( )) (functionBody (block { })))))) (semi \n \n) (statement (declaration (localClassDeclaration (classDeclaration class (simpleIdentifier LocalClass))))) (semi \n) })))) (semi \n \n \n)) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier property) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n \n (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))) \n \n (setter set ( (simpleIdentifier value) ) (functionBody (block { }))))) (semi \n)) }))) (semi \n \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { \n \n })))))

Testing DoubleColon.kt...
line 41:8 no viable alternative at input 'this::'
line 42:4 extraneous input 'super' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier simple)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier A))) :: (identifier (simpleIdentifier a)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier A))) :: (identifier (simpleIdentifier a))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier Map) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) >)) :: (identifier (simpleIdentifier size)))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier a)))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier b))) :: (identifier (simpleIdentifier c)))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b) . (simpleIdentifier c)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier b))) :: (identifier (simpleIdentifier c) . (simpleIdentifier d)))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier b))) :: (identifier (simpleIdentifier c))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier genericType)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier c)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier c) . (simpleIdentifier d)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier d)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier d) . (simpleIdentifier e)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c) . (simpleIdentifier d))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier e)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c) . (simpleIdentifier d))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier e) . (simpleIdentifier d)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c) . (simpleIdentifier d)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier e)) . (simpleUserType (simpleIdentifier f))))) >)))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier g) . (simpleIdentifier h)))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b) . (simpleIdentifier c)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier d))))) >))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier f))))) >))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier g))) :: (identifier (simpleIdentifier h)))))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier nullableType)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference ?:: (identifier (simpleIdentifier c)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a) < (simpleUserTypeParameter (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier b)))) ?))) , (simpleUserTypeParameter (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier c)))) ?))) >)) ?:: (identifier (simpleIdentifier d)))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier classLiteral)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier A))) :: class)))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier b)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier c)))))) >)) :: class)))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: class)))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))) (simpleIdentifier b) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: class)))))))))))))))) (semi \n \n) this ::))))) (topLevelObject (topClassDeclaration (classDeclaration class \n super :: simpleIdentifier))) (topLevelObject (topClassDeclaration (classDeclaration class \n (simpleIdentifier X) (primaryConstructor ( ))))))

Testing DoubleColonWhitespaces.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier tests)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? ? :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier breakLine)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? \n :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \n) })))) (semi \n)))

Testing DoubleColon_ERR.kt...
line 2:8 no viable alternative at input 'a::b('
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier err0)) (functionValueParameters ( )) (functionBody (block { \n a :: b ( ))))) (semi \n)))

Testing DuplicateAccessor.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0))))))))))))))))))))) (semi \n)))

Testing DynamicReceiver.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) ?)) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) ?)) . (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) \n \n \n \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) \n . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) \n . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))))

Testing DynamicSoftKeyword.kt...
(kotlinFile preamble)

Testing DynamicTypes.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier p1) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))))) , (functionValueParameter (parameter (simpleIdentifier p2) : (type (annotations (annotation @a)) (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))))) , (functionValueParameter (parameter (simpleIdentifier p3) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)) . (simpleUserType (simpleIdentifier dynamic))))))) , (functionValueParameter (parameter (simpleIdentifier p4) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)) . (simpleUserType (simpleIdentifier foo))))))) , (functionValueParameter (parameter (simpleIdentifier p5) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) >)))))) , (functionValueParameter (parameter (simpleIdentifier p6) : (type (typeReference (userType (simpleUserType (simpleIdentifier Foo) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))))) >)))))) , (functionValueParameter (parameter (simpleIdentifier p7) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) ?)))) , (functionValueParameter (parameter (simpleIdentifier p8) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))))))))

Testing EmptyFile.kt...
(kotlinFile preamble)

Testing EmptyName.kt...
line 1:4 token recognition error at: '``'
line 1:6 extraneous input ':' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:4 token recognition error at: '``'
line 5:6 token recognition error at: '``'
line 5:9 mismatched input '{' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 7:5 token recognition error at: '``'
line 7:7 extraneous input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 7:10 mismatched input '(' expecting {NL, COMMA, RANGLE}
line 11:9 token recognition error at: '``'
line 12:13 token recognition error at: '``'
line 11:12 no viable alternative at input 'for(in'
line 12:20 no viable alternative at input '(,y)='
line 13:4 extraneous input '}' expecting {NL, DOT}
line 14:0 extraneous input '}' expecting {NL, DOT}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val : (variableDeclaration (simpleIdentifier Int)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n \n)))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) (functionBody (block { })))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class { })) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < > (typeParameter (simpleIdentifier f))) (functionValueParameters ( )) (functionBody (block { })))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Data) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) , (classParameter val (parameter (simpleIdentifier y) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier g)) (functionValueParameters ( )) (functionBody (block { \n for ( in 1 .. 10 ) {)))) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type ( , y ) = Data ( 1 , 2 )) \n } \n }))))

Testing EnumCommas.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier NORTH)) , \n (enumEntry (simpleIdentifier SOUTH)) , \n (enumEntry (simpleIdentifier WEST)) , \n (enumEntry (simpleIdentifier EAST)) ,) \n ; \n })))))

Testing EnumEntryCommaAnnotatedMember.kt...
line 4:4 no viable alternative at input '\n\n@inline'
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST)) ,)))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (annotations (annotation @inline)) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing EnumEntryCommaInlineMember.kt...
line 4:11 mismatched input 'fun' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST)) , \n \n (enumEntry (simpleIdentifier inline))))))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing EnumEntryCommaMember.kt...
line 4:4 no viable alternative at input '\n\nfun'
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST)) ,)))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing EnumEntryCommaPublicMember.kt...
line 4:11 mismatched input 'fun' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST)) , \n \n (enumEntry (simpleIdentifier public))))))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing EnumEntrySemicolonInlineMember.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST))) ; \n \n (classMemberDeclaration (memberFunctionDeclaration (functionModifier inline) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) })))))

Testing EnumEntrySemicolonMember.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST))) ; \n \n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) })))))

Testing EnumEntrySpaceInlineMember.kt...
line 4:4 mismatched input 'inline' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST) \n \n)))))) (topLevelObject (topFunctionDeclaration (functionModifier inline) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing EnumEntrySpaceMember.kt...
line 4:4 mismatched input 'fun' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST) \n \n)))))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing EnumEntryTwoCommas.kt...
line 2:10 extraneous input ',' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST)) ,) , \n })))))

Testing EnumIn.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Foo) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier `in`) \n)) })))))

Testing EnumInline.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier inline) \n)) }))) (semi \n)))

Testing EnumInlinePublic.kt...
line 2:11 mismatched input 'public' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier inline))))))) topLevelObject (topLevelObject public , \n inner) topLevelObject (topLevelObject private ; \n \n companion) (topLevelObject (topObjectDeclaration (objectDeclaration object (classBody { }))) (semi \n)))

Testing EnumMissingName.kt...
line 2:10 mismatched input '(' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(kotlinFile (preamble \n) (topLevelObject (topClassDeclaration enum (enumClassDeclaration class ())) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))))))

Testing EnumOldConstructorSyntax.kt...
line 2:9 mismatched input ':' expecting {NL, RCURL, SEMICOLON}
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier FIRST))) : My ( 13 )))) (semi \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier y)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n)))))

Testing Enums.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier RED) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xFF000)))))))))))))))))) ))) , \n (enumEntry (simpleIdentifier GREEN) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x00FF00)))))))))))))))))) ))) , \n (enumEntry (simpleIdentifier BLUE) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x0000FF)))))))))))))))))) )) \n \n \n)) })))))

Testing EnumShortCommas.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier RED) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xFF000)))))))))))))))))) ))) , \n (enumEntry (simpleIdentifier GREEN) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x00FF00)))))))))))))))))) ))) , \n (enumEntry (simpleIdentifier BLUE) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x0000FF)))))))))))))))))) ))) ,) \n ; \n })))))

Testing EnumShortWithOverload.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier RED) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xFF000)))))))))))))))))) )) (enumEntryBody { \n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))))))))))))))))) })))) (semi \n)) })) , \n (enumEntry (simpleIdentifier GREEN) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x00FF00)))))))))))))))))) )) (enumEntryBody { \n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))))))))))))))))))))))))))))) })))) (semi \n)) })) , \n (enumEntry (simpleIdentifier BLUE) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x0000FF)))))))))))))))))) )) (enumEntryBody { \n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3))))))))))))))))))))))))))))))))))) })))) (semi \n)) }))) ; \n \n (classMemberDeclaration (memberFunctionDeclaration (inheritanceModifier abstract) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) \n))) })))))

Testing EnumWithAnnotationKeyword.kt...
line 1:16 extraneous input 'enum' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 2:4 no viable alternative at input '\nD'
(kotlinFile preamble (topLevelObject (topClassDeclaration (classModifier data) (classModifier annotation) (classDeclaration enum class (simpleIdentifier E) (classBody {))) (semi \n)))

Testing EOLsInComments.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) }))))))

Testing EOLsOnRollback.kt...
line 6:4 no viable alternative at input 'classfoo\n\ntypealias'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localClassDeclaration (classDeclaration class (simpleIdentifier foo))))) (semi \n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )))))) (semi \n)))))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) \n \n))) (topLevelObject (typeAlias typealias (simpleIdentifier x) = (type (typeReference (userType (simpleUserType (simpleIdentifier t)))))) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier r)) \n)) (semi \n)) (topLevelObject (topPropertyDeclaration (annotations (annotation @a)) (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4))))))))))))))))) (semi \n \n)))))

Testing Expressions_ERR.kt...
line 3:2 token recognition error at: ')'
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier f)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))))) ) (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return)))))))))))))))))) else))))))))))))))))))))))

Testing ExtensionsWithQNReceiver.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier java)) . (simpleUserType (simpleIdentifier util)) . (simpleUserType (simpleIdentifier Map) < (simpleUserTypeParameter *) , (simpleUserTypeParameter *) >)))) . (variableDeclaration (simpleIdentifier size) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier java)) . (simpleUserType (simpleIdentifier util)) . (simpleUserType (simpleIdentifier Map) < (simpleUserTypeParameter *) , (simpleUserTypeParameter *) >)))) . (identifier (simpleIdentifier size)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))) (semi \n)))

Testing FileStart_ERR.kt...
(kotlinFile preamble)

Testing FloatingPointLiteral.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier array)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier array)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e-1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e-1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e-1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e-1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e-1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e-1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant .1_1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3.141_592)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1__3_7)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1_0f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1_2f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2_2.0f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant .3_3f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3.14_16f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 6.022___137e+2_3f)))))))))))))))))) ))))))))))))))))))))))

Testing ForWithMultiDecl.kt...
line 8:9 no viable alternative at input 'for(val'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier main)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b)) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b)) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \n \n) for ())))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) ))))))

Testing FunctionCalls.kt...
line 32:17 no viable alternative at input 'v(fred<a,*,b>('
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier g)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier h)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier baz))))) >)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier i)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier j))))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) })))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier k)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \n) }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier l)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) )) (annotatedLambda (functionLiteral { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \n) }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier m)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \n) })))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier n)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) )) (annotatedLambda (functionLiteral { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \n) }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier o)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \n) })))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier p)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier qux)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >)))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier q)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier quux)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier r)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier corge))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier grault))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))))))))))) ))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier t)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier garply))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier u)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier waldo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) v ( fred < a , * , b > ( a ) ))))) (semi \n)))

Testing FunctionExpressions.kt...
line 1:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 1:13 no viable alternative at input '()'
line 2:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 3:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 5:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 6:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation ( ))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T) . (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))))))))))))))) )))))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T) . (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))))))))))))))) )))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T))))))))))))))))))))))

Testing FunctionExpressions_ERR.kt...
line 1:12 token recognition error at: ')'
line 1:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 2:15 token recognition error at: ')'
line 2:0 no viable alternative at input '\nval'
line 2:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun)) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T) . (simpleIdentifier foo))))))))))))))))))))))

Testing FunctionLiterals.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { }))) (postfixUnaryOperator (callSuffix (annotatedLambda \n \n (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \n \n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \n \n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier x))) , (lambdaParameter (variableDeclaration (simpleIdentifier y))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \n \n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))) , (lambdaParameter (variableDeclaration (simpleIdentifier c))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))) , (lambdaParameter (variableDeclaration (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier d))))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))))) , (lambdaParameter (variableDeclaration (simpleIdentifier c) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) }))))))))))))))))))) (semi \n \n \n \n) })))) (semi \n)))

Testing FunctionLiterals_ERR.kt...
line 2:6 no viable alternative at input '{->'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n { -> a })))) (semi \n \n)))

Testing FunctionNoParameterList.kt...
line 3:4 no viable alternative at input 'foo\nclass'
line 5:0 no viable alternative at input 'bar\n}'
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun foo)) (semi \n)) (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { }))) (semi \n)) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun bar)) (semi \n)) }))) (semi \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier C) (classBody { })))))

Testing Functions.kt...
line 2:12 mismatched input '(' expecting {NL, DOT}
line 5:16 mismatched input '<' expecting {NL, DOT}
line 8:12 mismatched input '(' expecting {NL, DOT}
line 11:16 mismatched input '<' expecting {NL, DOT}
line 14:12 mismatched input '(' expecting {NL, DOT}
line 17:16 mismatched input '<' expecting {NL, DOT}
line 19:16 mismatched input '<' expecting {NL, DOT}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T : ( a ) -> b > ( a : foo ) : bar)) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T : ( a ) -> b > ( a : foo ) : bar)) (semi ; \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ) { })) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T : ( a ) -> b > ( a : foo ) : bar { })) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T :))) topLevelObject (topLevelObject @ [ a ] ( a ) -> b > ( a : foo ) : bar { } \n \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier A)))) ?)) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier bar)))) ?)) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier A)))) ?)) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier bar)))) ?)) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))))))))

Testing FunctionsWithoutName.kt...
line 4:6 no viable alternative at input 'T.<'
line 9:6 no viable alternative at input 'T.<'
line 14:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 14:16 extraneous input ':' expecting {NL, '('}
line 14:21 mismatched input ')' expecting {NL, COLON}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun T . < T : ( a ) -> b > ( a : foo ) : bar)) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( )))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun T . < T : ( a ) -> b > ( a : foo ) : bar)) (semi ; \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) : (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a))) ))))))

Testing FunctionsWithoutName_ERR.kt...
line 1:4 token recognition error at: ')'
line 2:0 no viable alternative at input '\nfun'
line 2:16 mismatched input ')' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:13 mismatched input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 4:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 4:15 mismatched input ',' expecting {NL, '('}
line 5:13 mismatched input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:15 mismatched input ',' expecting {NL, '('}
line 8:9 extraneous input '=' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : type)) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < > ( a : foo ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) , , T > ( a : foo ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < , T , , T > ( a : foo ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) , T > ( , a : foo , , a : b ) : bar)) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) : = (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) (semi ;)))

Testing Functions_ERR.kt...
line 1:7 token recognition error at: ')'
line 2:0 no viable alternative at input 'foo\nfun'
line 2:14 mismatched input '(' expecting {NL, DOT}
line 3:16 mismatched input '<' expecting {NL, DOT}
line 4:16 mismatched input '<' expecting {NL, DOT}
line 5:16 mismatched input '<' expecting {NL, DOT}
line 6:22 mismatched input '(' expecting {NL, DOT}
line 8:12 extraneous input '=' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 9:12 extraneous input ';' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 11:0 no viable alternative at input '\n\nfun'
line 11:14 mismatched input '(' expecting {NL, DOT}
line 12:11 mismatched input '<' expecting {NL, DOT}
line 13:10 no viable alternative at input 'A.<'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun foo)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) ( a : ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < > ( a : foo ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T , , T > ( a : foo ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < , T , , T > ( a : foo ) : bar)) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) >)))) ( , a : foo , , a : b ) : bar)) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : = (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) (semi ; \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody = ;))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier foo) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier D)))))) >)))) ( ))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) < D ( ))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) A . < foo ( ))) (semi \n)))

Testing FunctionTypes.kt...
(kotlinFile preamble (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier x))) ])) (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) (semi \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier a)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier a)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) (semi \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier a)))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier a)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) ) -> (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))))))) (semi \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier B)))))) >) . (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier x)))))) >))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier B)))))) >) . (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier x)))))) >))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n)))

Testing FunctionTypes_ERR.kt...
line 1:19 no viable alternative at input '(a,)'
(kotlinFile preamble (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type ( a , ) -> b)) (semi \n)))

Testing HangOnLonelyModifier.kt...
line 2:0 no viable alternative at input '\nin'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block {)))) (semi \n)))

Testing IfWithPropery.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) ) (controlStructureBody (block { (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))))))) (semi ;) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) })) else (controlStructureBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) })))))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) ) (controlStructureBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) (semi ;))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) })) else (controlStructureBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) })))))))))))))))))))) (semi \n)))))

Testing Imports.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \n \n) (importHeader import (identifier (simpleIdentifier foo))) (semi \n) (importHeader import (identifier (simpleIdentifier foo) . (simpleIdentifier bar))) (semi \n) (importHeader import (identifier (simpleIdentifier foo)) as (simpleIdentifier bar)) (semi \n) (importHeader import (identifier (simpleIdentifier foo) . (simpleIdentifier bar)) as (simpleIdentifier bar)) (semi \n) (importHeader import (identifier (simpleIdentifier foo)) . *) (semi \n) (importHeader import (identifier (simpleIdentifier foo)) . *)))

Testing ImportSoftKW.kt...
(kotlinFile (preamble (importHeader import (identifier (simpleIdentifier import) . (simpleIdentifier import) . (simpleIdentifier import) . (simpleIdentifier import)) as (simpleIdentifier import))))

Testing Imports_ERR.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \n \n)))

Testing IncompleteFunctionLiteral.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))))))))))))))) })))))))))))))))))) (semi \n) }))))))

Testing Inner.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Outer) (classBody { \n (classMemberDeclaration (nestedClassDeclaration inner (classDeclaration class (simpleIdentifier Inner) \n))) }))) (semi \n)))

Testing IntegerLiteral.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier array)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier array)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))) >)))))))))))))))))))))

Testing Interface.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration interface (simpleIdentifier Foo) (classBody { \n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) \n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) \n))) }))) (semi \n)))

Testing InterfaceWithEnumKeyword.kt...
line 1:5 no viable alternative at input 'enuminterface'
line 1:15 extraneous input 'class' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 2:4 no viable alternative at input '\nD'
(kotlinFile preamble (topLevelObject topClassDeclaration) (topLevelObject (topClassDeclaration enum)) (topLevelObject (topClassDeclaration (classDeclaration interface class (simpleIdentifier E1) (classBody {))) (semi \n)))

Testing Labels.kt...
line 7:10 no viable alternative at input 'return@\nreturn@1'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (labelDefinition a@) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) )))))))))))))))))))))))))))))))))))) (semi \n \n) return@)))) (semi \n)))

Testing LineCommentAfterFileAnnotations.kt...
(kotlinFile (preamble (fileAnnotation @file : [ (unescapedAnnotation (identifier (simpleIdentifier Volatile))) ]) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier C) (classBody { })))))

Testing LineCommentForFirstDeclaration.kt...
(kotlinFile (preamble \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { }))))))

Testing LineCommentsInBlock.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \n \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n \n \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n \n \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing LocalDeclarations.kt...
line 7:8 no viable alternative at input 'outval'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier out))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \n) (statement (declaration (localClassDeclaration (annotations (annotation @a)) abstract (classDeclaration class (simpleIdentifier foof) (classBody { }))))) (semi \n) (statement (declaration (localClassDeclaration abstract (annotations (annotation @a)) (classDeclaration class (simpleIdentifier foof) (classBody { }))))) (semi \n \n) out))))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (annotations (annotation @a)) (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4))))))))))))))))) (semi \n)))) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \n)))

Testing LongPackageName.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier baz) . (simpleIdentifier buzz)))))

Testing ModifierAsSelector.kt...
(kotlinFile (preamble \n \n) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier z)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier System) . (simpleIdentifier out)))))))))))))))))) (semi \n \n)))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression throw (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Exception)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))))))))))))))))))))))))))))))))))) (semi ;) })))) (semi \n)))

Testing MultiVariableDeclarations.kt...
line 3:4 no viable alternative at input 'val'
line 4:4 no viable alternative at input 'val'
line 5:4 no viable alternative at input 'val'
line 6:4 no viable alternative at input 'val'
line 7:4 no viable alternative at input 'val'
line 8:4 no viable alternative at input 'var'
line 9:4 no viable alternative at input 'var'
line 10:4 no viable alternative at input 'var'
line 11:4 no viable alternative at input 'var'
line 12:4 no viable alternative at input 'var'
line 13:4 no viable alternative at input 'var'
line 15:4 mismatched input 'val' expecting {NL, SEMICOLON}
line 15:11 no viable alternative at input '()='
line 16:4 extraneous input 'val' expecting {NL, DOT}
line 16:14 no viable alternative at input '(,a)='
line 17:4 extraneous input 'val' expecting {NL, DOT}
line 17:12 no viable alternative at input '(a,)'
line 18:12 no viable alternative at input '(a,:'
line 19:12 no viable alternative at input '(a,:'
line 20:12 no viable alternative at input '(a,='
line 21:14 no viable alternative at input '(a,b='
line 22:9 no viable alternative at input '(1'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n))))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \n) \n)))) semi))))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type ( ) = 1) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type ( , a ) = 1) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , ) = 1)) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , : Int ) = 1)) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , : Int , ) = 1)) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , = 1))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , b = 1))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( 1 ) = 1))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) ))))))

Testing NamedClassObject.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier Companion))) (semi \n \n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier B))) (semi \n \n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier C) (classBody { }))) (semi \n \n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object \n \n))) (classMemberDeclaration (memberObjectDeclaration (objectDeclaration object (simpleIdentifier C) \n))) }))) (semi \n)))

Testing namelessObjectAsEnumMember.kt...
line 6:10 extraneous input 'object' expecting {NL, AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'sealed', 'annotation', 'data', 'inner', 'abstract', 'final', 'open', LabelReference}
line 7:0 extraneous input '}' expecting {NL, AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'sealed', 'annotation', 'data', 'inner', 'abstract', 'final', 'open', LabelReference}
(kotlinFile (preamble \n) (topLevelObject (topClassDeclaration (visibilityModifier public) enum (enumClassDeclaration class (simpleIdentifier A) (enumClassBody { \n (enumEntries (enumEntry (simpleIdentifier A)) , \n (enumEntry (simpleIdentifier B))) ; \n \n (classMemberDeclaration (nestedClassDeclaration inner object \n classDeclaration)) }))) (semi \n)))

Testing NestedComments.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier doo)) (functionValueParameters ( )) (functionBody (block { \n \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) })))) (semi \n)))

Testing NewlinesInParentheses.kt...
line 28:4 no viable alternative at input 'when(e){\nisT\n<X>\n->a\ninf\n('
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) \n (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) )))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) }))))))))))))))))) )))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) }))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) )))))))))))))))))) (semi \n))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d)))))))))))))))))) ])))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d))))))))))))))))))) }))))))))))))))))) ])))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d))))))))))))))))))) }))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d)))))))))))))))))) ])))))))))))))))) (semi \n))))) (semi \n) when ( e ) {)))) (semi \n)))

Testing NewLinesValidOperations.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier str)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " ")))))))))))))))))) (semi \n))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str) \n \n . (simpleIdentifier length))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str)))) (postfixUnaryOperator \n \n (memberAccessOperator ? .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier length))))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str)))))) (asExpressionTail \n \n (asOperator as) (type (typeReference (userType (simpleUserType (simpleIdentifier String))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str)))))) (asExpressionTail \n \n (asOperator as?) (type (typeReference (userType (simpleUserType (simpleIdentifier String))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str))))))))))) \n \n ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))) \n \n || (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false)))))))))))))))))) (semi \n \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false)))))))))))))) \n \n && (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi \n) }))))))

Testing NonTypeBeforeDotInBaseClass.kt...
line 2:18 mismatched input 'super' expecting {NL, AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier ClassB) (primaryConstructor ( )) (classBody { \n (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier ClassC) (delegationSpecifiers : super . ClassA ( )) (classBody { \n }))) (semi \n)) }))) (semi \n)))

Testing NotIsAndNotIn.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))) (isOperator !is ) (type (typeReference (userType (simpleUserType (simpleIdentifier B)))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))) (inOperator !in ) (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier B))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier isBoolean)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier inRange)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \n) }))))))

Testing ObjectLiteralAsStatement.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier main)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier args) : (type (typeReference (userType (simpleUserType (simpleIdentifier Array) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) >)))))) )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (objectLiteral object (delegationSpecifiers : (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier Thread))) (callSuffix (valueArguments ( )))))) (classBody { \n })))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier run)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi \n \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (objectLiteral object (classBody { \n }))))))))))))))))))) (semi \n) }))))))

Testing ParameterNameMising.kt...
line 1:13 mismatched input '<' expecting {NL, COLON}
line 6:13 mismatched input '<' expecting {NL, COLON}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier Array) < String >)) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 42))))))))))))))))))))) (semi \n) (statement (assignment (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (assignmentOperator +=) (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier bar)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier Array) < String >) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier array)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " "))))))))))))))))))) ))))))))))))))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 42))))))))))))))))))))) (semi \n) (statement (assignment (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (assignmentOperator +=) (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \n) }))))))

Testing ParameterType.kt...
line 1:11 mismatched input ')' expecting {NL, COLON}
line 2:12 mismatched input '=' expecting {NL, COLON}
line 5:27 mismatched input ')' expecting {NL, COLON}
line 6:16 mismatched input ')' expecting {NL, COLON}
line 17:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 18:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 18:15 no viable alternative at input '(b='
line 19:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, TRIPLE_QUOTE_OPEN, RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test1)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a))) )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test2)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4)))))))))))))))))) )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test3)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) )) (functionBody (block { })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test4)) (functionValueParameters ( (functionValueParameter (annotations (annotation @ann (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier parameter))))))))))))))))))) )))) (parameter (simpleIdentifier a))) )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test5)) (functionValueParameters ( (functionValueParameter (annotations (annotation @ann)) (parameter (simpleIdentifier a))) )) (functionBody (block { })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (tryExpression try (block { \n \n }) \n (catchBlock catch ( (simpleIdentifier a) : (userType (simpleUserType (simpleIdentifier Int))) ) (block { \n \n })))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation ( b = 4 ) { })))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier A))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) \n \n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) ))))))

Testing ParameterType_ERR.kt...
line 1:12 mismatched input ')' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:21 mismatched input '(' expecting {NL, COLON}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test1)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : type)) )) (functionBody (block { })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier inlineOptions) ( InlineOp)) ))))))

Testing Precedence.kt...
line 32:8 no viable alternative at input 'a=b->'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (postfixUnaryOperator ++) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4)))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator ++) (prefixUnaryOperator --) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x))))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) ))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x))))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))))))))))))) ))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))) (inOperator in) (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b) . (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))) (postfixUnaryOperator ++)))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator --) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))) (postfixUnaryOperator ++)))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator --) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))) .. (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b-1))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))) .. (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))) (simpleIdentifier foo) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))) .. (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))) (simpleIdentifier foo) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))))) ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))) (simpleIdentifier bar) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3)))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))) (simpleIdentifier b) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))))) (simpleIdentifier d) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))) (simpleIdentifier f) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier g))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))) ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))) (inOperator in) (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))) ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))) (equalityOperator ==) (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))) (equalityOperator !=) (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))) && (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))) || (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))) && (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \n) a = b -> c)))) (semi \n)))

Testing PrimaryConstructorModifiers_ERR.kt...
line 3:22 no viable alternative at input 'private{'
(kotlinFile preamble (topLevelObject (topClassDeclaration (inheritanceModifier open) (classDeclaration class (simpleIdentifier A) \n \n))) (topLevelObject (topClassDeclaration (inheritanceModifier open) (classDeclaration class (simpleIdentifier AB)))) topLevelObject (topLevelObject private { \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)))

Testing Properties.kt...
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar) . (simpleIdentifier foo) . (simpleIdentifier bar)))))))))))))))))) (semi \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (simpleIdentifier foo)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \n \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \n (getter get ( ) (functionBody (block { }))) \n (setter set ( (simpleIdentifier sad) ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))))))) (semi \n \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) (getter get \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) (setter set \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) \n (getter get \n) (setter (visibilityModifier private) set \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \n (getter get ( ) (functionBody (block { }))) \n (setter set \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \n (getter get \n) (setter set ( (simpleIdentifier sad) ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))))))) (semi \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi ;) (getter get \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi ;) (getter get) (setter set \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \n) (getter get \n) (setter (visibilityModifier private) set \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \n) (getter get ( ) (functionBody (block { }))) \n (setter set \n \n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \n) (getter get \n) (setter set ( (simpleIdentifier sad) ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))))))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \n) (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier IList) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) >)))) . (variableDeclaration (simpleIdentifier lastIndex) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (thisExpression this))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier size)))))))))) (additiveOperator -) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))) \n \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Int)))) ?)) . (variableDeclaration (simpleIdentifier opt) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Int)))) ?)) . (variableDeclaration (simpleIdentifier opt) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))))))

Testing PropertiesFollowedByInitializers.kt...
line 2:18 extraneous input '=' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 3:2 extraneous input 'var' expecting {NL, RCURL}
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Foo) (primaryConstructor ( )) (classBody { \n (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) (getter get)))) = 1 \n <missing RCURL>)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi ;)))

Testing Properties_ERR.kt...
line 1:4 mismatched input '-' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration var - { })) (semi \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f))))))

Testing PropertyInvokes.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _some))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier __some))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1_1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _some))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _1some))))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _1_some))))))))))))))))))))) (semi \n) }))))))

Testing QuotedIdentifiers.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (annotations (annotation @`return`)) (functionDeclaration fun (identifier (simpleIdentifier `package`)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier `class`)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier `$`) \n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier `$$`) \n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier ` `) \n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier `1`) \n))))

Testing Reserved.kt...
line 2:4 extraneous input 'typeof' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 6:4 no viable alternative at input 'yield\ntypeof'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier yield)) (functionValueParameters ( )) (functionBody (block { })))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun typeof (functionValueParameters ( )) (functionBody (block { })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \n yield)))) (semi \n)))

Testing SemicolonAfterIf.kt...
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier x)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))))))) (semi ;) (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier y)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (postfixUnaryOperator ++))))))))))))))))))) (semi ;) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier y)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))) (equalityOperator !=) (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ) (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant -1)))))))))))))))))))))))))))))))))))))))))))))))))))))) (semi ;) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))))))))))))))))))))) (semi ;) })))) (semi \n)))

Testing semicolonBetweenDeclarations.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo))) (semi ; \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo1)) (functionValueParameters ( )) (functionBody (block { })))) (semi ; \n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))

Testing SimpleClassMembers.kt...
line 16:8 no viable alternative at input '\n\ntypealias'
line 16:8 extraneous input 'typealias' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \n \n (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \n (classMemberDeclaration (memberObjectDeclaration (objectDeclaration object (simpleIdentifier foo) (classBody { \n \n }))) (semi \n \n)) (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier Bar) (classBody { }))) (semi \n \n)) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n \n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x)) \n \n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)))) (semi \n \n)))))) <missing RCURL>)))) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)))

Testing SimpleClassMembers_ERR.kt...
line 3:17 extraneous input '-' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 5:4 extraneous input 'class' expecting {NL, RCURL}
line 6:4 no viable alternative at input '\nsdfsd'
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \n \n (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { })))) - \n \n <missing RCURL>)))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Bar) (classBody {))) (semi \n)))

Testing SimpleExpressions.kt...
line 24:26 no viable alternative at input 'object:Foo{'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Unit))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x10)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant '1')))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent dsf) "))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (multiLineStringLiteral """ (multiLineStringContent dsf) """))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10.0)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier dbl))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier flt))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10.0))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier dbl))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier lng))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier this))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier super)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier sdf))))) >)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Triple)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent A) "))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xf)))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar))))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier A))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar))))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) >) (valueArguments ( ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation object))))))) <missing ')'>) : (type (typeReference (userType (simpleUserType (simpleIdentifier Foo))))) (functionBody (block { }))))))

Testing SimpleModifiers.kt...
line 7:0 extraneous input 'override' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 11:0 extraneous input 'protected' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 14:0 no viable alternative at input 'internal\nin'
line 17:8 no viable alternative at input '\nopen'
line 18:8 extraneous input 'enum' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 21:8 extraneous input 'override' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 25:8 extraneous input 'protected' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 28:8 no viable alternative at input 'internal\nin'
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \n \n)) (topLevelObject (topClassDeclaration (inheritanceModifier abstract \n) (inheritanceModifier open \n) (inheritanceModifier open \n) (classModifier annotation \n) override (classDeclaration \n (simpleIdentifier open) \n))) (topLevelObject (topClassDeclaration (inheritanceModifier abstract \n) (visibilityModifier private \n) protected (classDeclaration \n (simpleIdentifier public) \n))) topLevelObject (topLevelObject internal \n in \n out \n) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Bar) (typeParameters < (typeParameter (simpleIdentifier abstract))))) (semi \n)) (topLevelObject (topClassDeclaration (inheritanceModifier open \n) (classDeclaration (simpleIdentifier enum))) (semi \n)) (topLevelObject (topClassDeclaration (inheritanceModifier open \n) (classModifier annotation \n) override (classDeclaration \n (simpleIdentifier open) \n))) (topLevelObject (topClassDeclaration (inheritanceModifier abstract \n) (visibilityModifier private \n) protected (classDeclaration \n (simpleIdentifier public) \n))) topLevelObject (topLevelObject internal \n in \n out \n T > { \n) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier abstract)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier open)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier enum)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier open)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier annotation)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier override)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier open)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier abstract)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier private)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier protected)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier public)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier internal)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier lazy)) \n))))

Testing SoftKeywords.kt...
line 5:7 no viable alternative at input 'publicprotected'
line 10:0 extraneous input 'override' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 14:0 extraneous input 'protected' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
line 17:0 no viable alternative at input 'internal\nin'
line 20:1 extraneous input 'class' expecting {AT, FILE, 'fun', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'tailrec', 'operator', 'inline', 'external', 'suspend', LabelReference}
line 20:30 extraneous input 'enum' expecting {NL, COMMA, RANGLE}
line 20:48 extraneous input ',' expecting {AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'sealed', 'annotation', 'data', 'abstract', 'final', 'open', LabelReference}
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \n \n) (importHeader import (identifier (simpleIdentifier foo))) (semi \n \n)) topLevelObject (topLevelObject public protected) (topLevelObject (topClassDeclaration (visibilityModifier private) (visibilityModifier internal \n) (inheritanceModifier abstract \n) (inheritanceModifier open \n) (inheritanceModifier open \n) (classModifier annotation \n) override (classDeclaration \n (simpleIdentifier open) \n))) (topLevelObject (topClassDeclaration (inheritanceModifier abstract \n) (visibilityModifier private \n) protected (classDeclaration \n (simpleIdentifier public) \n))) topLevelObject (topLevelObject internal \n in \n out \n) (topLevelObject (topFunctionDeclaration (functionModifier suspend \n) functionDeclaration)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Bar) (typeParameters < (typeParameter (simpleIdentifier abstract)) , (typeParameter (simpleIdentifier abstract)))))) (topLevelObject topClassDeclaration) (topLevelObject (topClassDeclaration enum : T , out)) (topLevelObject (topClassDeclaration (inheritanceModifier open) , (classDeclaration \n (simpleIdentifier public)))))

Testing SoftKeywordsInTypeArguments.kt...
line 8:0 no viable alternative at input 'Foo<outInt>\n\n}'
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Foo) (typeParameters < (typeParameter (varianceAnnotation out) (simpleIdentifier abstract)) , (typeParameter (varianceAnnotation out) (simpleIdentifier out)) >) (classBody { }))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) (functionBody (block { \n \n \n Foo < out Int >)))) (semi \n \n)))

Testing StringTemplates.kt...
line 13:5 token recognition error at: '$"'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier demo)) (functionValueParameters ( )) (functionBody (block { \n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier abc)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " ")))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier asd)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier bar)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))))))) (semi \n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier map)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier f) : (type (nullableType (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))))) ?)))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))) (semi \n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier buzz)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier f) : (type (nullableType (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))))) ?)))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier sdf)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3))))))))))))))))) (semi ;))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $this) (lineStringContent  must be) (lineStringContent $as) (lineStringContent $t) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $abc) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $abc) (lineStringContent \") (lineStringContent \n    ) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $) (lineStringContent .) (lineStringContent $) (lineStringContent .asdf) (lineStringContent $\t) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent asd) (lineStringContent \$) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent asd) (lineStringContent $a) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent asd) (lineStringContent $a) (lineStringContent $asd) (lineStringContent $) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent fosdfasdo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 100))))))))))))))))) }) (lineStringContent }sdsdfgdsfsdf) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier map)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) })))))))))))))))))) }) (lineStringContent sdfsdf) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier map)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) "))))))))))))))))))) })))))))))))))))))) }) (lineStringContent sdfsdf) "))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier map)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringContent $sdf) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier buzz)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) }) "))))))))))))))))))) })))))))))))))))))) }) (lineStringContent sdfsdf) "))))))))))))))))))) (semi \n) }))))))

Testing Super.kt...
line 5:10 no viable alternative at input 'super<>'
(kotlinFile (preamble \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (superExpression super))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi ; \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (superExpression super < (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) >))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi ; \n) super < > . foo ( ))))) (semi ; \n)))

Testing TraitConstructor.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration interface (simpleIdentifier TestTrait) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) , (classParameter var (parameter (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier String))))))) , (classParameter (parameter (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier Double)))))))) )) \n))) (topLevelObject (topClassDeclaration (classDeclaration interface (simpleIdentifier TestTrait) (primaryConstructor ( ))))))

Testing TripleDot.kt...
(kotlinFile preamble)

Testing TryRecovery.kt...
line 11:16 no viable alternative at input 'try{\n}catch({}try{}catch(e:{'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier testOpenParens)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (tryExpression try (block { \n })))) (postfixUnaryOperator (callSuffix (annotatedLambda (unescapedAnnotation (identifier (simpleIdentifier catch))) (functionLiteral { \n }))))))))))))))))))) (semi \n \n) try {)))) (semi \n)))

Testing TypeAlias.kt...
(kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T) : (userType (simpleUserType (simpleIdentifier foo)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B) : (userType (simpleUserType (simpleIdentifier A)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T) : (userType (simpleUserType (simpleIdentifier foo)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B) : (userType (simpleUserType (simpleIdentifier A)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \n)))

Testing TypealiasIsKeyword.kt...
line 1:4 mismatched input 'typealias' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 1:14 mismatched input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val))) (topLevelObject (typeAlias typealias = 0)))

Testing TypeAlias_ERR.kt...
line 2:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 3:0 no viable alternative at input '\ntypealias'
line 4:0 extraneous input 'typealias' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 4:10 extraneous input ';' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 5:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 5:14 extraneous input ';' expecting {NL, ASSIGNMENT, LANGLE}
line 6:0 no viable alternative at input '\ntypealias'
line 6:16 extraneous input ';' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 7:0 extraneous input 'typealias' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 7:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 8:0 no viable alternative at input '\ntypealias'
line 8:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:16 extraneous input ';' expecting {NL, ASSIGNMENT, LANGLE}
line 10:0 no viable alternative at input '\ntypealias'
line 10:10 mismatched input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 12:14 mismatched input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 13:17 mismatched input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 14:18 extraneous input ',' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 17:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(kotlinFile preamble (topLevelObject (typeAlias typealias \n (simpleIdentifier typealias foo)) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = \n type)) (topLevelObject (typeAlias typealias ; \n (simpleIdentifier typealias foo) ;) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = ; \n type)) (topLevelObject (typeAlias typealias = (simpleIdentifier foo)) (semi \n)) (topLevelObject (typeAlias typealias = \n simpleIdentifier)) (topLevelObject (typeAlias typealias = (simpleIdentifier foo) ;) (semi \n)) (topLevelObject (typeAlias typealias =) (semi ; \n \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) , >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A) : , (userType (simpleUserType (simpleIdentifier B)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \n \n)) (topLevelObject (topClassDeclaration (classDeclaration class \n (simpleIdentifier typealias foo)))))

Testing TypeConstraints.kt...
(kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) >) (typeConstraints where (typeConstraint (simpleIdentifier T) : (type (typeReference (userType (simpleUserType (simpleIdentifier T))))))) (classBody { \n \n })))))

Testing TypeExpressionAmbiguities_ERR.kt...
line 3:16 no viable alternative at input 'fooo<Double?addddd'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Int)))) ?)) >) (valueArguments ( ))))))))))))))))))) (semi \n) fooo < Double ? addddd > ( ))))) (semi \n)))

Testing TypeModifiers.kt...
line 1:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p1) : (type suspend (typeReference (userType (simpleUserType (simpleIdentifier a)))))) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p2) : (type suspend (typeReference (parenthesizedTypeReference ( (typeReference (userType (simpleUserType (simpleIdentifier a)))) )))))))))

Testing TypeModifiersParenthesized.kt...
line 2:5 mismatched input '<' expecting {NL, DOT}
line 5:24 extraneous input '?' expecting {COMMA, ')'}
line 8:27 mismatched input '<' expecting {COMMA, ')'}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier B) < (simpleUserTypeParameter (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) )))) >)))) . (identifier (simpleIdentifier receiverArgument)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier B))))) < ())) topLevelObject (topLevelObject @A C ) ? > . receiverArgumentN ( ) \n \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameter)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))))) )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameterN)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))))) ? )) \n \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameterArgument)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier B) < (simpleUserTypeParameter (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) )))) >)))))) )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameterArgumentN)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier B))))))) < ()))) topLevelObject (topLevelObject @A C ) ? > ) \n \n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier returnValue)) (functionValueParameters ( )) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier returnValueN)) (functionValueParameters ( )) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) )))))))

Testing TypeModifiers_ERR.kt...
line 1:8 mismatched input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:0 extraneous input 'val' expecting {AT, FILE, 'fun', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'tailrec', 'operator', 'inline', 'external', 'suspend', LabelReference}
line 2:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p1) : type)))) (topLevelObject (topFunctionDeclaration (functionModifier suspend \n) functionDeclaration)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p2) : (type suspend (typeReference (parenthesizedTypeReference ( (typeReference (userType (simpleUserType (simpleIdentifier a)))) )))))))))

Testing TypeParametersBeforeName.kt...
line 2:19 mismatched input '(' expecting {NL, DOT}
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ))) (semi \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \n \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (typeParameters < (typeParameter (simpleIdentifier A)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier List) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) >)))) . (variableDeclaration (simpleIdentifier foo)) \n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (typeParameters < (typeParameter (simpleIdentifier A)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier List) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) >)))) . (variableDeclaration (simpleIdentifier foo))))))

Testing When.kt...
line 38:8 no viable alternative at input 'when(val'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false))))))))))))))))))))))))))))))))))) (semi \n \n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ) { (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))))) }))))))))))))))))))) })))))))))))))))))))))) (semi \n \n \n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier b)) (functionValueParameters ( )) (functionBody (block { })))))) (semi \n \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \n \n }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \n (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \n (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier Tree) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier a)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier b)))))) >)))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier A) . (simpleIdentifier b))))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0)))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 'c')))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent sadfsa) "))))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (multiLineStringLiteral """ (multiLineStringContent ddd) """))))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \n)) }))))))))))))))))))) (semi \n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier when)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier when)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e))))))))))))))))))) )) (annotatedLambda (functionLiteral { }))))))))))))))))))) )) (annotatedLambda (functionLiteral { })))))))))))))))))) ) { \n \n }))))))))))))))))))) (semi \n) })))) (semi \n \n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n when ())))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e))))))))))))))))))))))

Testing When_ERR.kt...
line 5:8 no viable alternative at input 'when(e){\nis->'
(kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \n }))))))))))))))))))) (semi \n) when ( e ) {)))) (semi \n)))
