Testing AbsentInnerType.kt...
line 1:9 no viable alternative at input '()?'
Result: 1 syntax errors

Testing AnonymousInitializer.kt...
Result: 0 syntax errors

Testing AssertNotNull.kt...
line 6:11 no viable alternative at input 'true!!!\n'
line 7:4 mismatched input 'true' expecting <EOF>
Result: 2 syntax errors

Testing BabySteps.kt...
Result: 0 syntax errors

Testing BabySteps_ERR.kt...
line 3:45 extraneous input ',' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
Result: 1 syntax errors

Testing BackslashInString.kt...
line 4:0 no viable alternative at input '"\\n}\n'
Result: 1 syntax errors

Testing BlockCommentAtBeginningOfFile1.kt...
line 1:0 mismatched input '/' expecting {<EOF>, NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'package', 'import', 'class', 'interface', 'fun', 'object', VAL, VAR, 'typealias', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'const', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
Result: 1 syntax errors

Testing BlockCommentAtBeginningOfFile2.kt...
line 1:0 mismatched input '/' expecting {<EOF>, NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'package', 'import', 'class', 'interface', 'fun', 'object', VAL, VAR, 'typealias', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'const', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
Result: 1 syntax errors

Testing BlockCommentAtBeginningOfFile3.kt...
line 1:0 mismatched input '/' expecting {<EOF>, NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'package', 'import', 'class', 'interface', 'fun', 'object', VAL, VAR, 'typealias', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'const', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
Result: 1 syntax errors

Testing BlockCommentAtBeginningOfFile4.kt...
Result: 0 syntax errors

Testing BlockCommentUnmatchedClosing_ERR.kt...
line 2:4 no viable alternative at input '\n*'
line 2:4 mismatched input '*' expecting <EOF>
Result: 2 syntax errors

Testing ByClauses.kt...
Result: 0 syntax errors

Testing CallsInWhen.kt...
line 10:8 no viable alternative at input 'when(a){\na.foo->a\na.foo()->a\na.foo<T>->a\na.foo<T>(a)->a\na.foo<T>(a,d)->a\na.{bar}->a\na.{!bar}->a\na.{->'
line 3:4 mismatched input 'a' expecting <EOF>
Result: 2 syntax errors

Testing CallWithManyClosures.kt...
Result: 0 syntax errors

Testing CollectionLiterals.kt...
line 2:4 no viable alternative at input '\n['
line 2:4 mismatched input '[' expecting <EOF>
Result: 2 syntax errors

Testing CollectionLiterals_ERR.kt...
line 2:4 no viable alternative at input '\n['
line 2:4 mismatched input '[' expecting <EOF>
Result: 2 syntax errors

Testing CommentsBinding.kt...
line 73:19 mismatched input '=' expecting <EOF>
Result: 1 syntax errors

Testing CommentsBindingInLambda.kt...
Result: 0 syntax errors

Testing CommentsBindingInStatementBlock.kt...
Result: 0 syntax errors

Testing Constructors.kt...
line 5:0 mismatched input 'protected' expecting <EOF>
Result: 1 syntax errors

Testing ControlStructures.kt...
line 3:25 no viable alternative at input 'throwFoo(),'
line 3:25 mismatched input ',' expecting <EOF>
Result: 2 syntax errors

Testing DefaultKeyword.kt...
line 26:0 mismatched input 'companion' expecting <EOF>
Result: 1 syntax errors

Testing destructuringInLambdas.kt...
Result: 0 syntax errors

Testing destructuringInLambdas_ERR.kt...
line 2:19 no viable alternative at input 'a8.filter{((x,'
line 3:4 mismatched input 'a9' expecting <EOF>
Result: 2 syntax errors

Testing DocCommentAfterFileAnnotations.kt...
Result: 0 syntax errors

Testing DocCommentForFirstDeclaration.kt...
Result: 0 syntax errors

Testing DocCommentOnPackageDirectiveLine.kt...
Result: 0 syntax errors

Testing DocCommentsBinding.kt...
Result: 0 syntax errors

Testing DoubleColon.kt...
line 41:8 no viable alternative at input 'this::'
line 42:4 extraneous input 'super' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 43:7 mismatched input '::' expecting <EOF>
Result: 3 syntax errors

Testing DoubleColonWhitespaces.kt...
Result: 0 syntax errors

Testing DoubleColon_ERR.kt...
line 2:8 no viable alternative at input 'a::b('
line 3:0 mismatched input '}' expecting <EOF>
Result: 2 syntax errors

Testing DuplicateAccessor.kt...
line 3:4 no viable alternative at input 'get()=0\nget'
line 3:4 mismatched input 'get' expecting <EOF>
Result: 2 syntax errors

Testing DynamicReceiver.kt...
Result: 0 syntax errors

Testing DynamicSoftKeyword.kt...
line 1:8 no viable alternative at input 'dynamicclass'
Result: 1 syntax errors

Testing DynamicTypes.kt...
Result: 0 syntax errors

Testing EmptyFile.kt...
Result: 0 syntax errors

Testing EmptyName.kt...
line 1:4 token recognition error at: '``'
line 1:6 extraneous input ':' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:4 token recognition error at: '``'
line 5:6 token recognition error at: '``'
line 5:9 mismatched input '{' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 7:5 token recognition error at: '``'
line 7:7 extraneous input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 7:10 mismatched input '(' expecting {NL, COMMA, RANGLE}
line 11:9 token recognition error at: '``'
line 12:13 token recognition error at: '``'
line 11:12 no viable alternative at input 'for(in'
line 12:20 no viable alternative at input '(,y)='
line 13:4 extraneous input '}' expecting {NL, DOT}
line 14:0 extraneous input '}' expecting {NL, DOT}
Result: 8 syntax errors

Testing EnumCommas.kt...
Result: 0 syntax errors

Testing EnumEntryCommaAnnotatedMember.kt...
line 4:4 no viable alternative at input '\n\n@inline'
line 5:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumEntryCommaInlineMember.kt...
line 4:11 mismatched input 'fun' expecting {NL, RCURL, SEMICOLON}
line 5:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumEntryCommaMember.kt...
line 4:4 no viable alternative at input '\n\nfun'
line 5:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumEntryCommaPublicMember.kt...
line 4:11 mismatched input 'fun' expecting {NL, RCURL, SEMICOLON}
line 5:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumEntrySemicolonInlineMember.kt...
Result: 0 syntax errors

Testing EnumEntrySemicolonMember.kt...
Result: 0 syntax errors

Testing EnumEntrySpaceInlineMember.kt...
line 4:4 mismatched input 'inline' expecting {NL, RCURL, SEMICOLON}
line 5:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumEntrySpaceMember.kt...
line 4:4 mismatched input 'fun' expecting {NL, RCURL, SEMICOLON}
line 5:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumEntryTwoCommas.kt...
line 2:10 extraneous input ',' expecting {NL, RCURL, SEMICOLON}
Result: 1 syntax errors

Testing EnumIn.kt...
Result: 0 syntax errors

Testing EnumInline.kt...
Result: 0 syntax errors

Testing EnumInlinePublic.kt...
line 2:11 mismatched input 'public' expecting {NL, RCURL, SEMICOLON}
line 6:0 extraneous input '}' expecting <EOF>
Result: 2 syntax errors

Testing EnumMissingName.kt...
line 2:10 mismatched input '(' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 2:24 mismatched input ')' expecting <EOF>
Result: 2 syntax errors

Testing EnumOldConstructorSyntax.kt...
line 2:9 mismatched input ':' expecting {NL, RCURL, SEMICOLON}
line 5:0 no viable alternative at input 'x+1\n}'
line 5:0 extraneous input '}' expecting <EOF>
Result: 3 syntax errors

Testing Enums.kt...
Result: 0 syntax errors

Testing EnumShortCommas.kt...
Result: 0 syntax errors

Testing EnumShortWithOverload.kt...
Result: 0 syntax errors

Testing EnumWithAnnotationKeyword.kt...
line 1:21 no viable alternative at input 'dataannotationenumclass'
Result: 1 syntax errors

Testing EOLsInComments.kt...
Result: 0 syntax errors

Testing EOLsOnRollback.kt...
line 6:4 no viable alternative at input 'classfoo\n\ntypealias'
line 11:4 no viable alternative at input '4\n\n1'
line 11:4 mismatched input '1' expecting <EOF>
Result: 3 syntax errors

Testing Expressions_ERR.kt...
line 3:2 token recognition error at: ')'
line 3:6 token recognition error at: ')'
line 3:10 token recognition error at: '~'
line 6:2 token recognition error at: '~'
line 8:2 token recognition error at: ']'
line 3:3 no viable alternative at input 'if(true)returnelse{\ndfsd\n;;'
line 2:2 mismatched input 'dfsd' expecting <EOF>
Result: 2 syntax errors

Testing ExtensionsWithQNReceiver.kt...
Result: 0 syntax errors

Testing FileStart_ERR.kt...
line 1:0 extraneous input '/' expecting {<EOF>, NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'package', 'import', 'class', 'interface', 'fun', 'object', VAL, VAR, 'typealias', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'const', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
Result: 1 syntax errors

Testing FloatingPointLiteral.kt...
Result: 0 syntax errors

Testing ForWithMultiDecl.kt...
line 8:9 no viable alternative at input 'for(val'
line 8:17 mismatched input 'in' expecting <EOF>
Result: 2 syntax errors

Testing FunctionCalls.kt...
line 32:17 no viable alternative at input 'v(fred<a,*,b>('
line 33:2 mismatched input 'w' expecting <EOF>
Result: 2 syntax errors

Testing FunctionExpressions.kt...
line 1:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 1:13 no viable alternative at input '()'
line 2:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 3:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 5:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 6:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 6:21 no viable alternative at input '@[a()]T.<'
line 8:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 8:15 no viable alternative at input '()'
line 9:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 10:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 10:22 no viable alternative at input '@[a]T.()'
line 11:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 12:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 12:23 no viable alternative at input '@[a()]T.<'
line 14:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 14:13 no viable alternative at input '()'
line 15:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 15:19 no viable alternative at input 'name()='
line 16:13 no viable alternative at input '@[a]fun'
line 18:8 mismatched input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 23:17 no viable alternative at input 'bar(fun@[a]T'
line 29:22 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 29:25 mismatched input ':' expecting {NL, '('}
line 31:25 mismatched input '}' expecting <EOF>
Result: 26 syntax errors

Testing FunctionExpressions_ERR.kt...
line 1:12 token recognition error at: ')'
line 1:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 2:15 token recognition error at: ')'
line 2:0 no viable alternative at input '\nval'
line 2:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:27 no viable alternative at input '@[a]T.foo(a:)'
line 6:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 6:25 no viable alternative at input '@[a()]T.foo<>'
line 7:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 7:21 no viable alternative at input '@[a()]T.<'
line 9:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 9:21 no viable alternative at input 'T.foo<T,,'
line 9:19 no viable alternative at input 'T,'
line 10:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 10:18 no viable alternative at input 'T.foo<,'
Result: 14 syntax errors

Testing FunctionLiterals.kt...
Result: 0 syntax errors

Testing FunctionLiterals_ERR.kt...
line 2:6 no viable alternative at input '{->'
line 4:4 mismatched input '{' expecting <EOF>
Result: 2 syntax errors

Testing FunctionNoParameterList.kt...
line 3:4 no viable alternative at input 'foo\nclass'
line 5:0 no viable alternative at input 'bar\n}'
Result: 2 syntax errors

Testing Functions.kt...
line 2:12 mismatched input '(' expecting {NL, DOT}
line 5:16 mismatched input '<' expecting {NL, DOT}
line 8:12 mismatched input '(' expecting {NL, DOT}
line 11:16 mismatched input '<' expecting {NL, DOT}
line 14:12 mismatched input '(' expecting {NL, DOT}
line 17:16 mismatched input '<' expecting {NL, DOT}
line 19:16 mismatched input '<' expecting {NL, DOT}
Result: 7 syntax errors

Testing FunctionsWithoutName.kt...
line 4:6 no viable alternative at input 'T.<'
line 9:6 no viable alternative at input 'T.<'
line 14:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 14:16 extraneous input ':' expecting {NL, '('}
line 14:21 mismatched input ')' expecting {NL, COLON}
line 14:23 mismatched input '->' expecting <EOF>
Result: 6 syntax errors

Testing FunctionsWithoutName_ERR.kt...
line 1:4 token recognition error at: ')'
line 2:0 no viable alternative at input '\nfun'
line 2:16 mismatched input ')' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:13 mismatched input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 4:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 4:15 mismatched input ',' expecting {NL, '('}
line 5:13 mismatched input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:15 mismatched input ',' expecting {NL, '('}
line 8:9 extraneous input '=' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
Result: 9 syntax errors

Testing Functions_ERR.kt...
line 1:7 token recognition error at: ')'
line 2:0 no viable alternative at input 'foo\nfun'
line 2:14 mismatched input '(' expecting {NL, DOT}
line 3:16 mismatched input '<' expecting {NL, DOT}
line 4:16 mismatched input '<' expecting {NL, DOT}
line 5:16 mismatched input '<' expecting {NL, DOT}
line 6:22 mismatched input '(' expecting {NL, DOT}
line 8:12 extraneous input '=' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 9:12 extraneous input ';' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 11:0 no viable alternative at input '\n\nfun'
line 11:14 mismatched input '(' expecting {NL, DOT}
line 12:11 mismatched input '<' expecting {NL, DOT}
line 13:10 no viable alternative at input 'A.<'
Result: 12 syntax errors

Testing FunctionTypes.kt...
Result: 0 syntax errors

Testing FunctionTypes_ERR.kt...
line 1:19 no viable alternative at input '(a,)'
Result: 1 syntax errors

Testing HangOnLonelyModifier.kt...
line 2:0 no viable alternative at input '\nin'
line 2:0 mismatched input 'in' expecting <EOF>
Result: 2 syntax errors

Testing IfWithPropery.kt...
Result: 0 syntax errors

Testing Imports.kt...
Result: 0 syntax errors

Testing ImportSoftKW.kt...
Result: 0 syntax errors

Testing Imports_ERR.kt...
line 33:7 token recognition error at: '^'
line 33:9 token recognition error at: '^'
line 6:7 no viable alternative at input 'foo.\nimportfoo'
line 6:11 no viable alternative at input 'importfoo.*'
line 7:11 no viable alternative at input 'importfoo.;'
line 8:11 no viable alternative at input 'importfoo.*'
line 11:12 no viable alternative at input 'foo.as'
line 12:11 no viable alternative at input 'importfoo.*'
line 13:12 no viable alternative at input 'importfoo.as'
line 14:11 no viable alternative at input 'importfoo.*'
line 16:14 no viable alternative at input 'fooas.'
line 17:14 no viable alternative at input 'fooas;'
line 18:14 no viable alternative at input 'fooas*'
line 20:11 no viable alternative at input 'importfoo.*'
line 21:11 no viable alternative at input 'importfoo.*'
line 23:7 no viable alternative at input 'foo.bar.\nimportfoo'
line 23:12 no viable alternative at input 'importfoo.as'
line 24:12 no viable alternative at input 'importfoo.as'
line 26:15 no viable alternative at input 'importfoo.bar.*'
line 27:15 no viable alternative at input 'importfoo.bar.*'
line 28:16 no viable alternative at input 'importfoo.bar.;'
line 29:15 no viable alternative at input 'importfoo.bar.*'
line 30:15 no viable alternative at input 'importfoo.bar.*'
line 35:7 no viable alternative at input 'import*\nimport-\nimport_\nimport.\nimport--'
line 35:7 no viable alternative at input 'import-\nimport_\nimport.\nimport--'
line 35:7 no viable alternative at input 'import_\nimport.\nimport--'
line 35:7 no viable alternative at input 'import.\nimport--'
line 35:10 no viable alternative at input 'import---;'
line 36:10 no viable alternative at input 'import+++\nimport..{..'
line 36:10 no viable alternative at input 'import..{..'
line 37:9 no viable alternative at input 'import..}'
line 40:0 no viable alternative at input 'importfoo\n\nfun'
line 40:0 mismatched input 'fun' expecting <EOF>
Result: 31 syntax errors

Testing IncompleteFunctionLiteral.kt...
Result: 0 syntax errors

Testing Inner.kt...
Result: 0 syntax errors

Testing IntegerLiteral.kt...
line 12:10 no viable alternative at input 'array<Any>(1,0x1,0X1,0b1,0B1,1L,0x1L,0X1L,0b1L,0B1L,1l,'
Result: 1 syntax errors

Testing Interface.kt...
Result: 0 syntax errors

Testing InterfaceWithEnumKeyword.kt...
line 1:5 no viable alternative at input 'enuminterface'
Result: 1 syntax errors

Testing Labels.kt...
line 7:10 no viable alternative at input 'return@\nreturn@1'
line 7:2 mismatched input 'return@' expecting <EOF>
Result: 2 syntax errors

Testing LineCommentAfterFileAnnotations.kt...
Result: 0 syntax errors

Testing LineCommentForFirstDeclaration.kt...
Result: 0 syntax errors

Testing LineCommentsInBlock.kt...
Result: 0 syntax errors

Testing LocalDeclarations.kt...
line 7:8 no viable alternative at input 'outval'
line 10:0 mismatched input '}' expecting <EOF>
Result: 2 syntax errors

Testing LongPackageName.kt...
Result: 0 syntax errors

Testing ModifierAsSelector.kt...
Result: 0 syntax errors

Testing MultiVariableDeclarations.kt...
line 3:4 no viable alternative at input 'val'
line 4:4 no viable alternative at input 'val'
line 5:4 no viable alternative at input 'val'
line 6:4 no viable alternative at input 'val'
line 7:4 no viable alternative at input 'val'
line 8:4 no viable alternative at input 'var'
line 9:4 no viable alternative at input 'var'
line 10:4 no viable alternative at input 'var'
line 11:4 no viable alternative at input 'var'
line 12:4 no viable alternative at input 'var'
line 13:4 no viable alternative at input 'var'
line 15:4 mismatched input 'val' expecting {NL, SEMICOLON}
line 15:11 no viable alternative at input '()='
line 16:4 extraneous input 'val' expecting {NL, DOT}
line 16:14 no viable alternative at input '(,a)='
line 17:4 extraneous input 'val' expecting {NL, DOT}
line 17:12 no viable alternative at input '(a,)'
line 18:12 no viable alternative at input '(a,:'
line 19:12 no viable alternative at input '(a,:'
line 20:12 no viable alternative at input '(a,='
line 21:14 no viable alternative at input '(a,b='
line 22:9 no viable alternative at input '(1'
line 25:11 mismatched input ':' expecting <EOF>
Result: 23 syntax errors

Testing NamedClassObject.kt...
Result: 0 syntax errors

Testing namelessObjectAsEnumMember.kt...
line 6:10 extraneous input 'object' expecting {NL, AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'sealed', 'annotation', 'data', 'inner', 'abstract', 'final', 'open', LabelReference}
line 7:0 extraneous input '}' expecting {NL, AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'sealed', 'annotation', 'data', 'inner', 'abstract', 'final', 'open', LabelReference}
Result: 2 syntax errors

Testing NestedComments.kt...
Result: 0 syntax errors

Testing NewlinesInParentheses.kt...
line 28:4 no viable alternative at input 'when(e){\nisT\n<X>\n->a\ninf\n('
line 24:4 mismatched input 'is' expecting <EOF>
Result: 2 syntax errors

Testing NewLinesValidOperations.kt...
Result: 0 syntax errors

Testing NonTypeBeforeDotInBaseClass.kt...
line 2:18 mismatched input 'super' expecting {NL, AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
Result: 1 syntax errors

Testing NotIsAndNotIn.kt...
Result: 0 syntax errors

Testing ObjectLiteralAsStatement.kt...
Result: 0 syntax errors

Testing ParameterNameMising.kt...
line 1:13 mismatched input '<' expecting {NL, COLON}
line 6:13 mismatched input '<' expecting {NL, COLON}
Result: 2 syntax errors

Testing ParameterType.kt...
line 1:11 mismatched input ')' expecting {NL, COLON}
line 2:12 mismatched input '=' expecting {NL, COLON}
line 5:27 mismatched input ')' expecting {NL, COLON}
line 6:16 mismatched input ')' expecting {NL, COLON}
line 17:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 18:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 18:15 no viable alternative at input '(b='
line 19:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
Result: 8 syntax errors

Testing ParameterType_ERR.kt...
line 1:12 mismatched input ')' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:21 mismatched input '(' expecting {NL, COLON}
line 3:31 mismatched input ')' expecting <EOF>
Result: 3 syntax errors

Testing Precedence.kt...
line 32:8 no viable alternative at input 'a=b->'
line 33:2 mismatched input 'a' expecting <EOF>
Result: 2 syntax errors

Testing PrimaryConstructorModifiers_ERR.kt...
line 3:22 no viable alternative at input 'private{'
line 5:0 mismatched input '}' expecting <EOF>
Result: 2 syntax errors

Testing Properties.kt...
Result: 0 syntax errors

Testing PropertiesFollowedByInitializers.kt...
line 2:18 extraneous input '=' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 3:2 extraneous input 'var' expecting {NL, RCURL}
line 3:25 mismatched input 'set' expecting <EOF>
Result: 3 syntax errors

Testing Properties_ERR.kt...
line 1:4 mismatched input '-' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:6 mismatched input '{' expecting <EOF>
Result: 2 syntax errors

Testing PropertyInvokes.kt...
Result: 0 syntax errors

Testing QuotedIdentifiers.kt...
Result: 0 syntax errors

Testing Reserved.kt...
line 2:4 extraneous input 'typeof' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 6:4 no viable alternative at input 'yield\ntypeof'
line 6:4 mismatched input 'typeof' expecting <EOF>
Result: 3 syntax errors

Testing SemicolonAfterIf.kt...
Result: 0 syntax errors

Testing semicolonBetweenDeclarations.kt...
line 4:9 no viable alternative at input '1;;'
line 16:27 extraneous input ';' expecting {NL, LCURL}
line 18:4 extraneous input 'companion' expecting {NL, LCURL}
line 21:7 no viable alternative at input 'foo;'
line 22:3 extraneous input ';' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 23:0 no viable alternative at input '\nclass'
line 24:7 extraneous input ';' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 26:15 extraneous input ';' expecting {NL, '('}
line 27:0 extraneous input '}' expecting {NL, '('}
Result: 9 syntax errors

Testing SimpleClassMembers.kt...
line 16:8 no viable alternative at input '\n\ntypealias'
line 16:8 extraneous input 'typealias' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 17:4 mismatched input '}' expecting <EOF>
Result: 3 syntax errors

Testing SimpleClassMembers_ERR.kt...
line 3:17 extraneous input '-' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 5:4 extraneous input 'class' expecting {NL, RCURL}
line 6:4 no viable alternative at input '\nsdfsd'
line 6:4 mismatched input 'sdfsd' expecting <EOF>
Result: 4 syntax errors

Testing SimpleExpressions.kt...
line 24:26 no viable alternative at input 'object:Foo{'
line 24:28 mismatched input ',' expecting <EOF>
Result: 2 syntax errors

Testing SimpleModifiers.kt...
line 14:0 no viable alternative at input 'internal\nin'
line 14:0 mismatched input 'in' expecting <EOF>
Result: 2 syntax errors

Testing SoftKeywords.kt...
line 17:0 no viable alternative at input 'internal\nin'
line 17:0 mismatched input 'in' expecting <EOF>
Result: 2 syntax errors

Testing SoftKeywordsInTypeArguments.kt...
line 8:0 no viable alternative at input 'Foo<outInt>\n\n}'
line 8:0 mismatched input '}' expecting <EOF>
Result: 2 syntax errors

Testing StringTemplates.kt...
line 13:5 token recognition error at: '$"'
Result: 0 syntax errors

Testing Super.kt...
line 5:10 no viable alternative at input 'super<>'
line 6:4 mismatched input 'super' expecting <EOF>
Result: 2 syntax errors

Testing TraitConstructor.kt...
Result: 0 syntax errors

Testing TripleDot.kt...
line 1:0 extraneous input '...' expecting {<EOF>, NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'package', 'import', 'class', 'interface', 'fun', 'object', VAL, VAR, 'typealias', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'const', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
Result: 1 syntax errors

Testing TryRecovery.kt...
line 11:16 no viable alternative at input 'try{\n}catch({}try{}catch(e:{'
line 7:4 mismatched input '}' expecting <EOF>
Result: 2 syntax errors

Testing TypeAlias.kt...
Result: 0 syntax errors

Testing TypealiasIsKeyword.kt...
line 1:4 mismatched input 'typealias' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 1:14 mismatched input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
Result: 2 syntax errors

Testing TypeAlias_ERR.kt...
line 2:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 3:0 no viable alternative at input '\ntypealias'
line 4:0 extraneous input 'typealias' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 4:10 extraneous input ';' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 5:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 5:14 extraneous input ';' expecting {NL, ASSIGNMENT, LANGLE}
line 6:0 no viable alternative at input '\ntypealias'
line 6:16 extraneous input ';' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 7:0 extraneous input 'typealias' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 7:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 8:0 no viable alternative at input '\ntypealias'
line 8:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:16 extraneous input ';' expecting {NL, ASSIGNMENT, LANGLE}
line 10:0 no viable alternative at input '\ntypealias'
line 10:10 mismatched input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 12:14 mismatched input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 13:17 mismatched input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 14:18 extraneous input ',' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 17:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 17:14 mismatched input '=' expecting <EOF>
Result: 22 syntax errors

Testing TypeConstraints.kt...
Result: 0 syntax errors

Testing TypeExpressionAmbiguities_ERR.kt...
line 3:16 no viable alternative at input 'fooo<Double?addddd'
line 4:4 mismatched input 'dd' expecting <EOF>
Result: 2 syntax errors

Testing TypeModifiers.kt...
line 1:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:20 mismatched input '->' expecting <EOF>
Result: 3 syntax errors

Testing TypeModifiersParenthesized.kt...
line 2:5 mismatched input '<' expecting {NL, DOT}
line 5:24 extraneous input '?' expecting {COMMA, ')'}
line 8:27 mismatched input '<' expecting {COMMA, ')'}
line 11:26 mismatched input '?' expecting <EOF>
Result: 4 syntax errors

Testing TypeModifiers_ERR.kt...
line 1:8 mismatched input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:0 extraneous input 'val' expecting {AT, FILE, 'fun', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'tailrec', 'operator', 'inline', 'external', 'suspend', LabelReference}
line 2:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:20 mismatched input '->' expecting <EOF>
Result: 4 syntax errors

Testing TypeParametersBeforeName.kt...
line 2:19 mismatched input '(' expecting {NL, DOT}
Result: 1 syntax errors

Testing When.kt...
line 38:8 no viable alternative at input 'when(val'
line 38:17 no viable alternative at input 'e)'
line 39:4 mismatched input 'is' expecting <EOF>
Result: 3 syntax errors

Testing When_ERR.kt...
line 5:8 no viable alternative at input 'when(e){\nis->'
line 5:4 mismatched input 'is' expecting <EOF>
Result: 2 syntax errors
