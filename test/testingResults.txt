Testing AbsentInnerType.kt...
line 1:9 no viable alternative at input '()?'
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x) : (type ( ) ?)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) <EOF>)

Testing AnonymousInitializer.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Foo) (classBody { \r\n \r\n (classMemberDeclaration (anonymousInitializer init (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier c)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))))))) (semi \r\n) })) (semi \r\n \r\n)) }))) (semi \r\n \r\n))) <EOF>)

Testing AssertNotNull.kt...
line 6:11 no viable alternative at input 'true!!!\r\n'
line 7:4 mismatched input 'true' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier main)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier args) : (type (typeReference (userType (simpleUserType (simpleIdentifier Array) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) >)))))) )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (prefixUnaryOperator !) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (prefixUnaryOperator !) (prefixUnaryOperator !) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi ; \r\n) true ! ! !)))) (semi \r\n))) true ! ! ! ! \r\n true ! ! and ( false ) \r\n true ! ! . and ( false ) \r\n })

Testing BabySteps.kt...
(file (kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Runnable) (typeParameters < (typeParameter (simpleIdentifier a)) , (typeParameter (simpleIdentifier a)) >) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier doo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0))))))))))))))))))) )) (delegationSpecifiers : (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier foo))) (callSuffix (valueArguments ( (valueArgument (simpleIdentifier d) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0)))))))))))))))))) ))))) , (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier bar))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))))) , (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier bar))) (callSuffix (annotatedLambda (functionLiteral { \r\n \r\n })))))) \r\n)))) <EOF>)

Testing BabySteps_ERR.kt...
line 3:45 extraneous input ',' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(file (kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Runnable) (typeParameters < (typeParameter (simpleIdentifier a)) , (typeParameter (simpleIdentifier a)) >) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier doo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0))))))))))))))))))) )) (delegationSpecifiers : (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier foo))) (callSuffix (valueArguments ( (valueArgument (simpleIdentifier d) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0)))))))))))))))))) ))))) , , (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier bar))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))))) , (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier bar))) (callSuffix (annotatedLambda (functionLiteral { \r\n \r\n })))))) \r\n)))) <EOF>)

Testing BackslashInString.kt...
line 4:0 no viable alternative at input '"\\r\n}\r\n'
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n " \\r \n}\r\n)))))) <EOF>)

Testing ByClauses.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5)))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) ))))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) ]))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { }))))))))))))))))))) ))))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (delegationSpecifiers : (delegationSpecifier (explicitDelegation (userType (simpleUserType (simpleIdentifier b))) by (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (objectLiteral object (classBody { \r\n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { }))))))))))))))))))))) (semi \r\n)) }))))))))))))))))))))) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi \r\n)) }))))) <EOF>)

Testing CallsInWhen.kt...
line 10:8 no viable alternative at input 'when(a){\r\na.foo->a\r\na.foo()->a\r\na.foo<T>->a\r\na.foo<T>(a)->a\r\na.foo<T>(a,d)->a\r\na.{bar}->a\r\na.{!bar}->a\r\na.{->'
line 3:4 mismatched input 'a' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n when ( a ) {)))) (semi \r\n))) a . foo -> a \r\n a . foo ( ) -> a \r\n a . foo < T > -> a \r\n a . foo < T > ( a ) -> a \r\n a . foo < T > ( a , d ) -> a \r\n a . { bar } -> a \r\n a . { ! bar } -> a \r\n a . { -> ! bar } -> a \r\n else -> a \r\n } \r\n } \r\n \r\n \r\n)

Testing CallWithManyClosures.kt...
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier A))))) >) (valueArguments ( )) (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))))))) <EOF>)

Testing CollectionLiterals.kt...
line 2:4 no viable alternative at input '\r\n['
line 2:4 mismatched input '[' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block {)))) (semi \r\n))) [ ] \r\n [ 1 ] \r\n [ 1 , 2 ] \r\n [ [ ] ] \r\n [ [ 1 ] ] \r\n [ 1 , [ ] ] \r\n [ [ ] , 1 ] \r\n [ [ ] , [ 1 , [ ] ] ] \r\n [ 1 , 2 ] \r\n [ 1 , [ 2 ] ] \r\n })

Testing CollectionLiterals_ERR.kt...
line 2:4 no viable alternative at input '\r\n['
line 2:4 mismatched input '[' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block {)))) (semi \r\n))) [ , ] \r\n [ 1 , ] \r\n [ , 1 ] \r\n [ 1 , 2 3 ] \r\n [ 1 , 2 3 , ] \r\n [ })

Testing Constructors.kt...
line 5:0 mismatched input 'protected' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \r\n }))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (visibilityModifier public) (classDeclaration class (simpleIdentifier foo) (primaryConstructor ( )) (delegationSpecifiers : (delegationSpecifier (userType (simpleUserType (simpleIdentifier Bar))))) \r\n)))) protected class foo private ( ) : Bar \r\n private class foo < T > ( ) : Bar \r\n internal class foo < T > private ( ) : Bar)

Testing ControlStructures.kt...
line 3:25 no viable alternative at input 'throwFoo(),'
line 3:25 mismatched input ',' expecting <EOF>
(file (kotlinFile (preamble \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation throw Foo ())))))) )))))) , a : foo = return 10 , a : foo = break , a : foo = break@ la , a : foo = continue , a : foo = continue@ la , a : foo = if ( 10 ) foo else bar , a : foo = if ( 10 ) foo ) { \r\n return 10 \r\n return \r\n 10 \r\n break \r\n la@ \r\n break@la \r\n continue \r\n la@ \r\n continue@la \r\n if ( foo ) \r\n if ( foo ) \r\n bar \r\n else \r\n foo \r\n else if ( foo ) \r\n bar \r\n else \r\n bar \r\n \r\n try { \r\n \r\n } \r\n catch ( Foo : Bar ) { \r\n \r\n } \r\n try { \r\n \r\n } \r\n catch ( Foo : Bar ) { \r\n \r\n } \r\n catch ( Foo : Bar ) { \r\n \r\n } \r\n catch ( Foo : Bar ) { \r\n \r\n } \r\n try { \r\n \r\n } \r\n catch ( Foo : Bar ) { \r\n \r\n } \r\n catch ( Foo : Bar ) { \r\n \r\n } \r\n finally { \r\n \r\n } \r\n try { \r\n \r\n } \r\n finally { \r\n \r\n } \r\n \r\n for ( val x in foo ) a \r\n for ( x in foo ) a \r\n for ( val x : Int in foo ) a \r\n for ( x : Int in foo ) { } \r\n \r\n while ( true ) { } \r\n \r\n do { \r\n \r\n } while ( false ) \r\n } \r\n \r\n fun foo ( ) { \r\n for ( a in b ) \r\n b \r\n \r\n for ( a in b ) { } \r\n \r\n for ( a in b ) { \r\n b \r\n } \r\n \r\n for ( a in b ) ; \r\n b \r\n \r\n while ( a in b ) \r\n b \r\n \r\n while ( a in b ) { \r\n b \r\n } \r\n \r\n while ( a in b ) ; \r\n b \r\n \r\n while ( a ) { } \r\n \r\n if ( a ) \r\n b \r\n else \r\n c \r\n \r\n if ( a ) b else c \r\n \r\n if ( a ) b \r\n else c \r\n \r\n if ( a ) \r\n b ; \r\n else \r\n c ; \r\n \r\n if ( a ) b \r\n if ( a ) \r\n b \r\n if ( a ) \r\n b ; \r\n \r\n if ( a ) else c \r\n if ( a ) \r\n else c \r\n if ( a ) \r\n ; \r\n else c \r\n if ( a ) \r\n else ; \r\n \r\n do while ( r ) \r\n do foo while ( r ) \r\n do { ;; ; foo ; bar ;; ;; } while ( r ) \r\n })

Testing DefaultKeyword.kt...
line 26:0 mismatched input 'companion' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { \r\n \r\n }))) (semi \r\n)) }))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object \r\n \r\n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \r\n)))) }))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (visibilityModifier public) (companionObject companion object (simpleIdentifier A) (classBody { \r\n \r\n }))) (semi \r\n)) }))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier A) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { \r\n }))) (semi \r\n)) }))) (semi \r\n)) }))) (semi \r\n \r\n))) companion object B \r\n \r\n companion object { \r\n \r\n } \r\n \r\n object A { \r\n companion object \r\n } \r\n \r\n interface A { \r\n companion object \r\n \r\n class C { \r\n companion object C { \r\n companion object \r\n } \r\n } \r\n } \r\n \r\n enum class D { \r\n A , B ; \r\n \r\n companion object \r\n } \r\n \r\n \r\n \r\n class A { \r\n class companion object \r\n } \r\n \r\n class A { \r\n companion public final object \r\n } \r\n \r\n \r\n companion class { } \r\n \r\n \r\n val t = companion object { \r\n \r\n } \r\n \r\n enum class I { \r\n A , \r\n B ; \r\n \r\n companion object \r\n } \r\n \r\n enum class I { \r\n A , \r\n B ; \r\n \r\n companion object { } \r\n })

Testing destructuringInLambdas.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a1) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) -> }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a2) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) ))) -> }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a3) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier z))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) -> }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a4) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) , (lambdaParameter (variableDeclaration (simpleIdentifier z))) -> }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a5) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier q))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) , (lambdaParameter (variableDeclaration (simpleIdentifier z))) -> }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a6) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) ))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier z)) , (variableDeclaration (simpleIdentifier w)) ))) -> }))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a7) . (simpleIdentifier filter)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier x)) , (variableDeclaration (simpleIdentifier y)) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Type)))))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier z) : (type (typeReference (userType (simpleUserType (simpleIdentifier Type)))))) ))) , (lambdaParameter (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier w)) , (variableDeclaration (simpleIdentifier u) : (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier V)))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo7)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) }))))))))))))))))))) (semi \r\n) })))) (semi \r\n))) <EOF>)

Testing destructuringInLambdas_ERR.kt...
line 2:19 no viable alternative at input 'a8.filter{((x,'
line 3:4 mismatched input 'a9' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n a8 . filter { ( ( x , y ) , z ) -> foo8 ( ) })))) (semi \r\n))) a9 . filter { ( x -> foo9 ( ) } a10 . filter { ( x , y : ) : -> foo10 ( ) } })

Testing DoubleColon.kt...
line 41:8 no viable alternative at input 'this::'
line 42:4 extraneous input 'super' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 43:4 mismatched input 'X' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier simple)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier A))) :: (identifier (simpleIdentifier a)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier A))) :: (identifier (simpleIdentifier a))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier Map) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) >)) :: (identifier (simpleIdentifier size)))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier a)))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier b))) :: (identifier (simpleIdentifier c)))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b) . (simpleIdentifier c)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier b))) :: (identifier (simpleIdentifier c) . (simpleIdentifier d)))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier b))) :: (identifier (simpleIdentifier c))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier genericType)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier c)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier c) . (simpleIdentifier d)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier d)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier d) . (simpleIdentifier e)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c) . (simpleIdentifier d))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier e)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c) . (simpleIdentifier d))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier e) . (simpleIdentifier d)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c) . (simpleIdentifier d)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier e)) . (simpleUserType (simpleIdentifier f))))) >)))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: (identifier (simpleIdentifier g) . (simpleIdentifier h)))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b) . (simpleIdentifier c)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier d))))) >))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier f))))) >))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier g))) :: (identifier (simpleIdentifier h)))))))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier nullableType)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference ?:: (identifier (simpleIdentifier c)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a) < (simpleUserTypeParameter (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier b)))) ?))) , (simpleUserTypeParameter (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier c)))) ?))) >)) ?:: (identifier (simpleIdentifier d)))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier classLiteral)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier A))) :: class)))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier b)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier c)))))) >)) :: class)))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: class)))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))) (simpleIdentifier b) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference :: class)))))))))))))))) (semi \r\n \r\n) this ::))))) (topLevelObject (topClassDeclaration (classDeclaration class \r\n super :: (simpleIdentifier class))) (semi \r\n))) X ( ) :: class \r\n object { } :: class \r\n } \r\n \r\n fun expressions ( ) { \r\n this@ x :: foo \r\n super < a > @b :: foo \r\n \r\n - a :: b \r\n ++ a :: b \r\n a + b :: c \r\n ( a + b ) :: c \r\n x ( ) :: e \r\n x ( ) . y ( ) . z ( ) :: e \r\n \r\n a :: b . c :: d \r\n A :: a :: b \r\n } \r\n \r\n fun emptyLHS ( ) { \r\n :: x . name \r\n foo ( :: x . name ) \r\n } \r\n)

Testing DoubleColonWhitespaces.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier tests)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ?:: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? ? :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier breakLine)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier a))) ? \r\n :: (identifier (simpleIdentifier b)))))))))))))))))) (semi \r\n) })))) (semi \r\n))) <EOF>)

Testing DoubleColon_ERR.kt...
line 2:8 no viable alternative at input 'a::b('
line 3:0 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier err0)) (functionValueParameters ( )) (functionBody (block { \r\n a :: b ( ))))) (semi \r\n))) } \r\n \r\n fun err1 ( ) { \r\n a . b :: c ( ) \r\n } \r\n \r\n fun err2 ( ) { \r\n A :: \r\n } \r\n \r\n fun err3 ( ) { \r\n :: \r\n } \r\n \r\n fun err4 ( ) { \r\n :: x ( ) \r\n } \r\n \r\n fun err5 ( ) { \r\n :: x ( ) ( ) \r\n } \r\n \r\n fun typeArgumentsError ( ) { \r\n :: a < b > \r\n :: a < b , c < * > > \r\n a :: b < c > \r\n \r\n :: a < b > ( ) \r\n } \r\n)

Testing DuplicateAccessor.kt...
line 3:4 no viable alternative at input 'get()=0\r\nget'
line 3:4 mismatched input 'get' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \r\n get ( ) = 0)) (semi \r\n))) get ( ) = 0 \r\n)

Testing DynamicReceiver.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) ?)) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) ?)) . (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \r\n \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) \r\n \r\n \r\n \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) \r\n . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) \r\n . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n)))) <EOF>)

Testing DynamicSoftKeyword.kt...
line 1:8 no viable alternative at input 'dynamicclass'
(file (script preamble (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation dynamic class)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier dynamic)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier dynamic)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))))))))))))))))) )))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \r\n (statement (declaration (localFunctionDeclaration (annotations (annotation @dynamic)) (functionDeclaration fun (identifier (simpleIdentifier dynamic)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier dynamic)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (callableReference (userType (simpleUserType (simpleIdentifier dynamic))) :: (identifier (simpleIdentifier foo)))))))))))))))))) (semi \r\n) })))))) (semi \r\n) })))))))))))))))))) <EOF>)

Testing DynamicTypes.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier p1) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))))) , (functionValueParameter (parameter (simpleIdentifier p2) : (type (annotations (annotation @a)) (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))))) , (functionValueParameter (parameter (simpleIdentifier p3) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)) . (simpleUserType (simpleIdentifier dynamic))))))) , (functionValueParameter (parameter (simpleIdentifier p4) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)) . (simpleUserType (simpleIdentifier foo))))))) , (functionValueParameter (parameter (simpleIdentifier p5) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) >)))))) , (functionValueParameter (parameter (simpleIdentifier p6) : (type (typeReference (userType (simpleUserType (simpleIdentifier Foo) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))))) >)))))) , (functionValueParameter (parameter (simpleIdentifier p7) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))) ?)))) , (functionValueParameter (parameter (simpleIdentifier p8) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic)))))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier dynamic))))))))) <EOF>)

Testing EmptyFile.kt...
(file (kotlinFile preamble) <EOF>)

Testing EmptyName.kt...
line 1:4 token recognition error at: '``'
line 1:6 extraneous input ':' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:4 token recognition error at: '``'
line 5:6 token recognition error at: '``'
line 5:9 mismatched input '{' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 7:5 token recognition error at: '``'
line 7:7 extraneous input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 7:10 mismatched input '(' expecting {NL, COMMA, RANGLE}
line 11:9 token recognition error at: '``'
line 12:13 token recognition error at: '``'
line 11:12 no viable alternative at input 'for(in'
line 12:20 no viable alternative at input '(,y)='
line 13:4 extraneous input '}' expecting {NL, DOT}
line 14:0 extraneous input '}' expecting {NL, DOT}
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val : (variableDeclaration (simpleIdentifier Int)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \r\n \r\n)))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class { })) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < > (typeParameter (simpleIdentifier f))) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Data) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) , (classParameter val (parameter (simpleIdentifier y) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier g)) (functionValueParameters ( )) (functionBody (block { \r\n for ( in 1 .. 10 ) {)))) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type ( , y ) = Data ( 1 , 2 )) \r\n } \r\n })))) <EOF>)

Testing EnumCommas.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier NORTH)) , \r\n (enumEntry (simpleIdentifier SOUTH)) , \r\n (enumEntry (simpleIdentifier WEST)) , \r\n (enumEntry (simpleIdentifier EAST)) ,) \r\n ; \r\n }))))) <EOF>)

Testing EnumEntryCommaAnnotatedMember.kt...
line 4:4 no viable alternative at input '\r\n\r\n@inline'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST)) ,)))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (annotations (annotation @inline)) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } <EOF>)

Testing EnumEntryCommaInlineMember.kt...
line 4:11 no viable alternative at input 'fun'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST)) , \r\n \r\n (enumEntry (simpleIdentifier inline))))))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } <EOF>)

Testing EnumEntryCommaMember.kt...
line 4:4 no viable alternative at input '\r\n\r\nfun'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST)) ,)))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } <EOF>)

Testing EnumEntryCommaPublicMember.kt...
line 4:11 no viable alternative at input 'fun'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST)) , \r\n \r\n (enumEntry (simpleIdentifier public))))))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } <EOF>)

Testing EnumEntrySemicolonInlineMember.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST))) ; \r\n \r\n (classMemberDeclaration (memberFunctionDeclaration (functionModifier inline) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) }))))) <EOF>)

Testing EnumEntrySemicolonMember.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST))) ; \r\n \r\n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) }))))) <EOF>)

Testing EnumEntrySpaceInlineMember.kt...
line 4:4 no viable alternative at input 'inline'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST) \r\n \r\n)))))) (topLevelObject (topFunctionDeclaration (functionModifier inline) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } <EOF>)

Testing EnumEntrySpaceMember.kt...
line 4:4 no viable alternative at input 'fun'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST) \r\n \r\n)))))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } <EOF>)

Testing EnumEntryTwoCommas.kt...
line 2:10 no viable alternative at input ','
line 3:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST)) ,) ,))) (semi \r\n))) } <EOF>)

Testing EnumIn.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Foo) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier `in`) \r\n)) }))))) <EOF>)

Testing EnumInline.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier inline) \r\n)) }))) (semi \r\n))) <EOF>)

Testing EnumInlinePublic.kt...
line 2:11 no viable alternative at input 'public'
line 6:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier inline))))))) topLevelObject (topLevelObject public , \r\n inner) topLevelObject (topLevelObject private ; \r\n \r\n companion) (topLevelObject (topObjectDeclaration (objectDeclaration object (classBody { }))) (semi \r\n))) } <EOF>)

Testing EnumMissingName.kt...
line 2:10 mismatched input '(' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 2:24 mismatched input ')' expecting <EOF>
(file (kotlinFile (preamble \r\n) (topLevelObject (topClassDeclaration enum (enumClassDeclaration class ())) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))))) ) { \r\n RED ( 0xFF000 ) , \r\n GREEN ( 0x00FF00 ) , \r\n BLUE ( 0x0000FF ) \r\n })

Testing EnumOldConstructorSyntax.kt...
line 2:9 no viable alternative at input ':'
line 5:0 no viable alternative at input 'x+1\r\n}'
line 5:0 extraneous input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier My) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier FIRST))) : My ( 13 )))) (semi \r\n \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier y)) = (expression (disjunction (conjunction (equality (comparison (infixOperation x + 1)))))))) (semi \r\n))) } <EOF>)

Testing Enums.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier RED) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xFF000)))))))))))))))))) ))) , \r\n (enumEntry (simpleIdentifier GREEN) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x00FF00)))))))))))))))))) ))) , \r\n (enumEntry (simpleIdentifier BLUE) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x0000FF)))))))))))))))))) )) \r\n \r\n \r\n)) }))))) <EOF>)

Testing EnumShortCommas.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier RED) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xFF000)))))))))))))))))) ))) , \r\n (enumEntry (simpleIdentifier GREEN) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x00FF00)))))))))))))))))) ))) , \r\n (enumEntry (simpleIdentifier BLUE) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x0000FF)))))))))))))))))) ))) ,) \r\n ; \r\n }))))) <EOF>)

Testing EnumShortWithOverload.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration enum (enumClassDeclaration class (simpleIdentifier Color) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier rgb) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier RED) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xFF000)))))))))))))))))) )) (enumEntryBody { \r\n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))))))))))))))))) })))) (semi \r\n)) })) , \r\n (enumEntry (simpleIdentifier GREEN) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x00FF00)))))))))))))))))) )) (enumEntryBody { \r\n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))))))))))))))))))))))))))))) })))) (semi \r\n)) })) , \r\n (enumEntry (simpleIdentifier BLUE) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x0000FF)))))))))))))))))) )) (enumEntryBody { \r\n (enumEntryBodyMembers (memberFunctionDeclaration override (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3))))))))))))))))))))))))))))))))))) })))) (semi \r\n)) }))) ; \r\n \r\n (classMemberDeclaration (memberFunctionDeclaration (inheritanceModifier abstract) (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) \r\n))) }))))) <EOF>)

Testing EnumWithAnnotationKeyword.kt...
line 1:21 no viable alternative at input 'dataannotationenumclass'
(file (script preamble (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation data)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation annotation)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation enum class)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier E)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier D))))))))))))))))))) (semi \r\n) })))))))))))))))))) (semi \r\n \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier enum)))) (postfixUnaryOperator (callSuffix (annotatedLambda (unescapedAnnotation (identifier (simpleIdentifier annotation))) (unescapedAnnotation (identifier (simpleIdentifier E1))) (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier D))))))))))))))))))) (semi \r\n) }))))))))))))))))))) <EOF>)

Testing EOLsOnRollback.kt...
line 6:4 no viable alternative at input 'classfoo\r\n\r\ntypealias'
line 11:4 no viable alternative at input '4\r\n\r\n1'
line 11:4 mismatched input '1' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localClassDeclaration (classDeclaration class (simpleIdentifier foo))))) (semi \r\n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )))))) (semi \r\n)))))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) \r\n \r\n))) (topLevelObject (typeAlias typealias (simpleIdentifier x) = (type (typeReference (userType (simpleUserType (simpleIdentifier t)))))) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier r)) \r\n)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (annotations (annotation @a)) (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation 4)))))))) (semi \r\n \r\n))) 1 \r\n @a val f \r\n })

Testing Expressions_ERR.kt...
line 3:2 token recognition error at: ')'
line 3:6 token recognition error at: ')'
line 3:10 token recognition error at: '~'
line 6:2 token recognition error at: '~'
line 8:2 token recognition error at: ']'
line 3:3 no viable alternative at input 'if(true)returnelse{\r\ndfsd\r\n;;'
line 2:2 mismatched input 'dfsd' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier f)) = (expression (disjunction (conjunction (equality (comparison (infixOperation if ( true ) return else {)))))))) (semi \r\n))) dfsd \r\n ;; ; ;; ; ;; ; \r\n srgsdfg \r\n \r\n \r\n \r\n \r\n } \r\n)

Testing ExtensionsWithQNReceiver.kt...
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier java)) . (simpleUserType (simpleIdentifier util)) . (simpleUserType (simpleIdentifier Map) < (simpleUserTypeParameter *) , (simpleUserTypeParameter *) >)))) . (variableDeclaration (simpleIdentifier size) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \r\n \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier java)) . (simpleUserType (simpleIdentifier util)) . (simpleUserType (simpleIdentifier Map) < (simpleUserTypeParameter *) , (simpleUserTypeParameter *) >)))) . (identifier (simpleIdentifier size)) (functionValueParameters ( )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))) (semi \r\n))) <EOF>)

Testing FileStart_ERR.kt...
line 1:0 no viable alternative at input '/'
(file / package foo . bar \r\n import foo)

Testing FloatingPointLiteral.kt...
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier array)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier array)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e-1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e-1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e-1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e-1F)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e-1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0e-1f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant .1_1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3.141_592)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1__3_7)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1_0f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1e1_2f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2_2.0f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant .3_3f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3.14_16f)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 6.022___137e+2_3f)))))))))))))))))) )))))))))))))))))))))) <EOF>)

Testing ForWithMultiDecl.kt...
line 8:9 no viable alternative at input 'for(val'
line 8:17 mismatched input 'in' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier main)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b)) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b)) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (loopExpression (forExpression for ( (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) in (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ) (controlStructureBody (block { }))))))))))))))))))))) (semi \r\n \r\n) for ())))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )))))) in b ) { } \r\n for ( val ( a , b ) in b ) { } \r\n for ( val ( a : Int , b : Int ) in b ) { } \r\n for ( val ( a : Int , b ) in b ) { } \r\n for ( val ( a , b : Int ) in b ) { } \r\n \r\n for ( var ( a ) in b ) { } \r\n for ( var ( a , b ) in b ) { } \r\n for ( var ( a : Int , b : Int ) in b ) { } \r\n for ( var ( a : Int , b ) in b ) { } \r\n for ( var ( a , b : Int ) in b ) { } \r\n \r\n for ( ( a in b ) { } for ( ( a , ) in b ) { } for ( ( a : ) in b ) { } for ( ( a : , ) in b ) { } for ( ( , b : Int ) in b ) { } for ( ( a : in b ) { } for ( ( ) { } })

Testing FunctionCalls.kt...
line 32:17 no viable alternative at input 'v(fred<a,*,b>('
line 33:2 mismatched input 'w' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier g)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier h)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier baz))))) >)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier i)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier j))))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) })))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier k)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \r\n) }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier l)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) )) (annotatedLambda (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \r\n) }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier m)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \r\n) })))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier n)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) )) (annotatedLambda (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \r\n) }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier o)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s))))))))))))))))))) (semi \r\n) })))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier p)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier qux)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >)))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier q)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier quux)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier r)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier corge))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier s)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier grault))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))))))))))) ))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier t)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier garply))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier u)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier waldo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) v ( fred < a , * , b > ( a ) ))))) (semi \r\n))) w ( plugh < a , " " , b > ( a ) ) \r\n xyzzy < * > ( ) \r\n 1 . _foo ( ) \r\n 1 . __foo ( ) \r\n 1_1 . _foo ( ) \r\n 1 . _1foo ( ) \r\n 1 . _1_foo ( ) \r\n } \r\n)

Testing FunctionExpressions.kt...
line 1:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 1:13 no viable alternative at input '()'
line 2:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 3:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 5:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 6:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 6:21 no viable alternative at input '@[a()]T.<'
line 8:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 8:15 no viable alternative at input '()'
line 9:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 10:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 10:22 no viable alternative at input '@[a]T.()'
line 11:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 12:10 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 12:23 no viable alternative at input '@[a()]T.<'
line 15:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 15:19 no viable alternative at input 'name()='
line 16:13 no viable alternative at input '@[a]fun'
line 18:8 mismatched input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 23:17 no viable alternative at input 'bar(fun@[a]T'
line 29:22 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 29:25 mismatched input ':' expecting {NL, '('}
line 31:25 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation ( ))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T) . (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))))))))))))))) )))))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T) . (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))))))))))))))) )))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison infixOperation)))))))) topLevelObject (topLevelObject @ [ a ( ) ] T . < T : ( a ) -> b > ( a : foo ) : bar \r\n \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier c)) (functionValueParameters ( )) (functionBody = fun ( )))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier c)) (functionValueParameters ( )) (functionBody = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier name)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier c)) (functionValueParameters ( )) (functionBody = fun (expression (disjunction (conjunction (equality (comparison infixOperation))))))))) topLevelObject (topLevelObject @ [ a ] T . ( ) ; \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier c)) (functionValueParameters ( )) (functionBody = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier T)))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))))))))))))))) )))))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))))))))))))))))))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier c)) (functionValueParameters ( )) (functionBody = fun (expression (disjunction (conjunction (equality (comparison infixOperation))))))))) topLevelObject (topLevelObject @ [ a ( ) ] T . < T : ( a ) -> b > ( a : foo ) : bar ; \r\n \r\n) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier d)) =))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))))) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier d)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation name ( ) = a)))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison infixOperation)))))))) (topLevelObject (topFunctionDeclaration (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (functionDeclaration fun (functionValueParameters ( )) \r\n \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier b)) =))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) (functionValueParameters ( )) (typeConstraints where (typeConstraint (simpleIdentifier T) : (type (typeReference (userType (simpleUserType (simpleIdentifier A))))))) \r\n \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier outer)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier fun)))) (postfixUnaryOperator (callSuffix (valueArguments ( )) (annotatedLambda (functionLiteral { }))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier fun)))) (postfixUnaryOperator (callSuffix (annotatedLambda (unescapedAnnotation (identifier (simpleIdentifier name)) (valueArguments ( ))) (functionLiteral { }))))))))))))))))))) ))))))))))))))))))) (semi \r\n) bar ( fun))))) topLevelObject (topLevelObject @ [ a ] T . ( ) { } ) \r\n bar ( fun) topLevelObject (topLevelObject @ [ a ] T . name ( ) { } ) \r\n \r\n bar ( fun) topLevelObject (topLevelObject @ [ a ] T . ( a : foo ) : bar { } ) \r\n bar ( fun) topLevelObject (topLevelObject @ [ a ( ) ] T . < T : ( a ) -> b > ( a : foo ) : bar { } ) \r\n \r\n bar {) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) :))) topLevelObject (topLevelObject @ [ a ] ( a ) -> b > ( a : foo ) : bar { } } \r\n \r\n bar {) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier A)))) ?)) . (functionValueParameters ( )) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier bar)))) ?)))))) } \r\n bar { fun A ? . ( ) : bar ? } \r\n \r\n bar ( fun ( ) = a ) \r\n bar ( fun name ( ) = a ) \r\n bar ( @ [ a ] fun name ( ) = a ) \r\n } \r\n)

Testing FunctionExpressions_ERR.kt...
line 1:12 token recognition error at: ')'
line 1:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 2:15 token recognition error at: ')'
line 2:0 no viable alternative at input '\r\nval'
line 2:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 4:27 no viable alternative at input '@[a]T.foo(a:)'
line 6:24 mismatched input '<' expecting {NL, DOT}
line 7:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 7:21 no viable alternative at input '@[a()]T.<'
line 9:17 mismatched input '<' expecting {NL, DOT}
line 10:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 10:18 no viable alternative at input 'T.foo<,'
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))) (semi \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison infixOperation)))))))) topLevelObject (topLevelObject @ [ a ] T . foo ( a : ) : bar \r\n \r\n) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) =))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison infixOperation)))))))) topLevelObject (topLevelObject @ [ a ( ) ] T . < > ( a : foo ) : bar \r\n \r\n) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) =))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T , , T > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation T . foo)))))))))) < , T , , T > ( a : foo ) : bar \r\n val a = fun T . foo < T , T > ( , a : foo , , a : b ) : bar \r\n \r\n val a = fun foo ( ) : = a ; \r\n \r\n val public_fun = public fun ( ) \r\n val open_fun = open fun ( ) \r\n val final_fun = final fun ( ) \r\n \r\n val where_fun = fun ( ) where T : V \r\n fun where_fun ( ) = fun ( ) where T : V \r\n \r\n fun outer ( ) { \r\n bar ( fun ) \r\n \r\n bar ( fun T ) \r\n bar ( fun T . ) \r\n bar ( fun @ [ a ] ) \r\n \r\n \r\n bar ( public fun ( ) ) \r\n bar ( open fun ( ) ) \r\n bar ( final fun ( ) ) \r\n \r\n bar ( fun ( ) where T : V ) \r\n })

Testing FunctionLiterals.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { }))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n \r\n (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n \r\n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n \r\n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier x))) , (lambdaParameter (variableDeclaration (simpleIdentifier y))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n \r\n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))) , (lambdaParameter (variableDeclaration (simpleIdentifier c))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))) , (lambdaParameter (variableDeclaration (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier d))))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) })))) (postfixUnaryOperator (callSuffix (annotatedLambda \r\n (functionLiteral { (lambdaParameter (variableDeclaration (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))))) , (lambdaParameter (variableDeclaration (simpleIdentifier c) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))))) -> (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f))))))))))))))))))) }))))))))))))))))))) (semi \r\n \r\n \r\n \r\n) })))) (semi \r\n))) <EOF>)

Testing FunctionLiterals_ERR.kt...
line 2:6 no viable alternative at input '{->'
line 4:4 mismatched input '{' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n { -> a })))) (semi \r\n \r\n))) { ( a -> a } { ( a : ) -> a } { ( a , ) -> a } { ( a : A , , a : B ) -> a } { ( a : A , , , a ) : T -> a } { T . t ( a ) -> a } { T . t - ( a : A ) -> a } { a : b , -> f } { a : , c -> f } { a : -> f } { a , -> f } { a : b , } { a : , } { T . a : b -> f } { ( a , b ) } { T . ( a , b ) } { ( a : Int , ) } { a , } { ( ) -> a } { ( ) -> a } { ( ) : T -> a } { ( ) : T -> a } { T . ( a ) -> a } { T . ( a : A ) -> a } { T . ( a : A ) : T -> a } { T . ( a ) : T -> a } { @ [ a ] x , @ [ b ] y , @ [ c ] z -> 1 } { ( ( a : Int = object { fun t ( ) { } } ) -> Int ) . ( x : Int ) : String -> " " } { A . B < String > . ( x : Int ) -> } { ( ( a : Boolean = true ) -> Int ) . ( x : Any ) : Unit -> } })

Testing FunctionNoParameterList.kt...
line 3:4 no viable alternative at input 'foo\r\nclass'
line 5:0 no viable alternative at input 'bar\r\n}'
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \r\n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun foo)) (semi \r\n)) (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { }))) (semi \r\n)) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun bar)) (semi \r\n)) }))) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier C) (classBody { }))))) <EOF>)

Testing Functions.kt...
line 2:12 mismatched input '(' expecting {NL, DOT}
line 5:16 mismatched input '<' expecting {NL, DOT}
line 8:12 mismatched input '(' expecting {NL, DOT}
line 11:16 mismatched input '<' expecting {NL, DOT}
line 14:12 mismatched input '(' expecting {NL, DOT}
line 17:16 mismatched input '<' expecting {NL, DOT}
line 19:16 mismatched input '<' expecting {NL, DOT}
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T : ( a ) -> b > ( a : foo ) : bar)) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T : ( a ) -> b > ( a : foo ) : bar)) (semi ; \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ) { })) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T : ( a ) -> b > ( a : foo ) : bar { })) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T :))) topLevelObject (topLevelObject @ [ a ] ( a ) -> b > ( a : foo ) : bar { } \r\n \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier A)))) ?)) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier bar)))) ?)) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier A)))) ?)) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier bar)))) ?)) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5)))))))))))))))))))))) <EOF>)

Testing FunctionsWithoutName.kt...
line 4:6 no viable alternative at input 'T.<'
line 9:6 no viable alternative at input 'T.<'
line 14:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 14:16 extraneous input ':' expecting {NL, '('}
line 14:21 mismatched input ')' expecting {NL, COLON}
line 14:23 mismatched input '->' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun T . < T : ( a ) -> b > ( a : foo ) : bar)) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( )))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun T . < T : ( a ) -> b > ( a : foo ) : bar)) (semi ; \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) : (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a))) )))))) -> b > ( a : foo ) : bar { } \r\n fun @ [ a ( ) ] T . < T : @ [ a ] ( a ) -> b > ( a : foo ) : bar { } \r\n \r\n fun A ? . ( ) : bar ? \r\n fun A ? . ( ) : bar ?)

Testing FunctionsWithoutName_ERR.kt...
line 1:4 token recognition error at: ')'
line 2:0 no viable alternative at input '\r\nfun'
line 2:16 mismatched input ')' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:13 mismatched input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 4:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 4:15 mismatched input ',' expecting {NL, '('}
line 5:13 mismatched input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:13 extraneous input '<' expecting {NL, '(', 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:15 mismatched input ',' expecting {NL, '('}
line 8:9 extraneous input '=' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : type)) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) , , T > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < , T , , T > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . < (identifier (simpleIdentifier T)) , T > ( , a : foo , , a : b ) : bar)) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (functionValueParameters ( )) : = (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) (semi ;))) <EOF>)

Testing Functions_ERR.kt...
line 1:7 token recognition error at: ')'
line 2:0 no viable alternative at input 'foo\r\nfun'
line 2:14 mismatched input '(' expecting {NL, DOT}
line 3:16 mismatched input '<' expecting {NL, DOT}
line 4:16 mismatched input '<' expecting {NL, DOT}
line 5:16 mismatched input '<' expecting {NL, DOT}
line 6:22 mismatched input '(' expecting {NL, DOT}
line 8:12 extraneous input '=' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 9:12 extraneous input ';' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 11:0 no viable alternative at input '\r\n\r\nfun'
line 11:14 mismatched input '(' expecting {NL, DOT}
line 12:11 mismatched input '<' expecting {NL, DOT}
line 13:10 no viable alternative at input 'A.<'
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun foo)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) ( a : ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < T , , T > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo))))) < , T , , T > ( a : foo ) : bar)) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a)) (valueArguments ( ))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier foo) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) >)))) ( , a : foo , , a : b ) : bar)) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) : = (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) (semi ; \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody = ;))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier foo) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier D)))))) >)))) ( ))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) < D ( ))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier T)) >) A . < foo ( ))) (semi \r\n))) <EOF>)

Testing FunctionTypes.kt...
(file (kotlinFile preamble (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier x))) ])) (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) (semi \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier a)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier a)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) (semi \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier a)))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier a)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) , (parameter (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier b))))))))) ) -> (type (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))))))) (semi \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier B)))))) >) . (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier x)))))) >))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T)) . (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier B)))))) >) . (simpleUserType (simpleIdentifier T) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier x)))))) >))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n))) <EOF>)

Testing FunctionTypes_ERR.kt...
line 1:19 no viable alternative at input '(a,)'
(file (kotlinFile preamble (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type ( a , ) -> b)) (semi \r\n))) <EOF>)

Testing HangOnLonelyModifier.kt...
line 2:0 no viable alternative at input '\r\nin'
line 2:0 mismatched input 'in' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block {)))) (semi \r\n))) in \r\n } \r\n)

Testing IfWithPropery.kt...
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) ) (controlStructureBody (block { (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))))))) (semi ;) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) })) else (controlStructureBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) })))))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) ) (controlStructureBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) (semi ;))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \r\n) })) else (controlStructureBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) })))))))))))))))))))) (semi \r\n))))) <EOF>)

Testing Imports.kt...
(file (kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \r\n \r\n) (importHeader import (identifier (simpleIdentifier foo))) (semi \r\n) (importHeader import (identifier (simpleIdentifier foo) . (simpleIdentifier bar))) (semi \r\n) (importHeader import (identifier (simpleIdentifier foo)) as (simpleIdentifier bar)) (semi \r\n) (importHeader import (identifier (simpleIdentifier foo) . (simpleIdentifier bar)) as (simpleIdentifier bar)) (semi \r\n) (importHeader import (identifier (simpleIdentifier foo)) . *) (semi \r\n) (importHeader import (identifier (simpleIdentifier foo)) . *))) <EOF>)

Testing ImportSoftKW.kt...
(file (kotlinFile (preamble (importHeader import (identifier (simpleIdentifier import) . (simpleIdentifier import) . (simpleIdentifier import) . (simpleIdentifier import)) as (simpleIdentifier import)))) <EOF>)

Testing Imports_ERR.kt...
line 33:7 token recognition error at: '^'
line 33:9 token recognition error at: '^'
line 6:7 no viable alternative at input 'foo.\r\nimportfoo'
line 6:11 no viable alternative at input 'importfoo.*'
line 7:11 no viable alternative at input 'importfoo.;'
line 8:11 no viable alternative at input 'importfoo.*'
line 11:12 no viable alternative at input 'foo.as'
line 12:11 no viable alternative at input 'importfoo.*'
line 13:12 no viable alternative at input 'importfoo.as'
line 14:11 no viable alternative at input 'importfoo.*'
line 16:14 no viable alternative at input 'fooas.'
line 17:14 no viable alternative at input 'fooas;'
line 18:14 no viable alternative at input 'fooas*'
line 20:11 no viable alternative at input 'importfoo.*'
line 21:11 no viable alternative at input 'importfoo.*'
line 23:7 no viable alternative at input 'foo.bar.\r\nimportfoo'
line 23:12 no viable alternative at input 'importfoo.as'
line 24:12 no viable alternative at input 'importfoo.as'
line 26:15 no viable alternative at input 'importfoo.bar.*'
line 27:15 no viable alternative at input 'importfoo.bar.*'
line 28:16 no viable alternative at input 'importfoo.bar.;'
line 29:15 no viable alternative at input 'importfoo.bar.*'
line 30:15 no viable alternative at input 'importfoo.bar.*'
line 35:7 no viable alternative at input 'import*\r\nimport-\r\nimport_\r\nimport.\r\nimport--'
line 35:7 no viable alternative at input 'import-\r\nimport_\r\nimport.\r\nimport--'
line 35:7 no viable alternative at input 'import_\r\nimport.\r\nimport--'
line 35:7 no viable alternative at input 'import.\r\nimport--'
line 35:10 no viable alternative at input 'import---;'
line 36:10 no viable alternative at input 'import+++\r\nimport..{..'
line 36:10 no viable alternative at input 'import..{..'
line 37:9 no viable alternative at input 'import..}'
line 40:0 no viable alternative at input 'importfoo\r\n\r\nfun'
line 40:0 mismatched input 'fun' expecting <EOF>
(file (script (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \r\n \r\n)) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (semi \r\n \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . *)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . *)))))) (semi ; \r\n \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))) (asExpressionTail (asOperator as) \r\n (type (typeReference (userType (simpleUserType (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . as)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . * as)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . as)))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . * as)))))) (semi ; \r\n \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo as .)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo as)))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo as *)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))) (asExpressionTail (asOperator as) (type (typeReference (userType (simpleUserType (simpleIdentifier sdfsdf)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . * as)))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . * as)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier import)))))))))))))))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation bar .)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . as)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo . as)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi ; \r\n \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation bar . * as)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation bar . * as)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation bar .)))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation bar . * as)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo .)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation bar . * as)))))) (semi ; \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import *)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation -)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import .)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation --)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation -)))))) (semi ;) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation ++)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation +)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import ..)))))) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation { .. .)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import .. } .. .)))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation import)))))) (expression (disjunction (conjunction (equality (comparison (infixOperation foo)))))) (semi \r\n \r\n)) fun foo ( ) { \r\n \r\n } \r\n)

Testing IncompleteFunctionLiteral.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))))))))))))))) })))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing Inner.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Outer) (classBody { \r\n (classMemberDeclaration (nestedClassDeclaration inner (classDeclaration class (simpleIdentifier Inner) \r\n))) }))) (semi \r\n))) <EOF>)

Testing IntegerLiteral.kt...
line 12:10 no viable alternative at input 'array<Any>(1,0x1,0X1,0b1,0B1,1L,0x1L,0X1L,0b1L,0B1L,1l,'
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier array)) = (expression (disjunction (conjunction (equality (comparison (infixOperation array)))))))))) < Any > ( 1 , 0x1 , 0X1 , 0b1 , 0B1 , 1L , 0x1L , 0X1L , 0b1L , 0B1L , 1 l , 0x1 l , 0X1 l , 0b1 l , 0B1 l , 0 , 1_2 , 12__34 , 0x1_2_3_4 , 0B0 , 0b0001_0010_0100_1000 , 1_2L , 12__34 l , 0x1_2_3_4L , 0B0L , 0b0001_0010_0100_1000 l , 0xa_af1 , 0xa_af_1 ) \r\n \r\n val a = 0 1)

Testing Interface.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration interface (simpleIdentifier Foo) (classBody { \r\n (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) \r\n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) \r\n))) }))) (semi \r\n))) <EOF>)

Testing InterfaceWithEnumKeyword.kt...
line 1:5 no viable alternative at input 'enuminterface'
(file enum interface class E1 { \r\n D \r\n } \r\n \r\n interface enum class E2 { \r\n D \r\n } \r\n \r\n enum interface E3 { \r\n D \r\n })

Testing Labels.kt...
line 7:10 no viable alternative at input 'return@\r\nreturn@1'
line 7:2 mismatched input 'return@' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (labelDefinition a@) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) )))))))))))))))))))))))))))))))))))) (semi \r\n \r\n) return@)))) (semi \r\n))) return@ 1 \r\n return@ ( @ 1 ) \r\n return@ @ 1 \r\n \r\n return@a \r\n return@a 1 \r\n return@a ( a@ 1 ) \r\n return@a a@ 1 \r\n \r\n return@ @ \r\n return@ @ 1 \r\n \r\n break \r\n break@ \r\n break@a \r\n \r\n continue \r\n continue@ \r\n continue@a \r\n \r\n a . filter f@ { \r\n if ( 1 ) return \r\n return@f true \r\n } \r\n \r\n a . filter @ { \r\n if ( 1 ) return \r\n return@ true \r\n } \r\n \r\n this \r\n this@ \r\n this@ a \r\n \r\n super < A > \r\n super < A > @ \r\n super < A > @a \r\n })

Testing LineCommentAfterFileAnnotations.kt...
(file (kotlinFile (preamble (fileAnnotation @file : [ (unescapedAnnotation (identifier (simpleIdentifier Volatile))) ]) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier C) (classBody { }))))) <EOF>)

Testing LineCommentForFirstDeclaration.kt...
(file (kotlinFile (preamble \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))))) <EOF>)

Testing LineCommentsInBlock.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \r\n \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \r\n \r\n \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \r\n \r\n \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) <EOF>)

Testing LocalDeclarations.kt...
line 7:8 no viable alternative at input 'outval'
line 10:0 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier out))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \r\n) (statement (declaration (localClassDeclaration (annotations (annotation @a)) abstract (classDeclaration class (simpleIdentifier foof) (classBody { }))))) (semi \r\n) (statement (declaration (localClassDeclaration abstract (annotations (annotation @a)) (classDeclaration class (simpleIdentifier foof) (classBody { }))))) (semi \r\n \r\n) out))))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (annotations (annotation @a)) (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4))))))))))))))))) (semi \r\n)))) (topLevelObject (typeAlias typealias (simpleIdentifier f) = (type (typeReference (userType (simpleUserType (simpleIdentifier T)))) . (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit)))))))) (semi \r\n))) } \r\n)

Testing LongPackageName.kt...
(file (kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier baz) . (simpleIdentifier buzz))))) <EOF>)

Testing ModifierAsSelector.kt...
(file (kotlinFile (preamble \r\n \r\n) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier z)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier System) . (simpleIdentifier out)))))))))))))))))) (semi \r\n \r\n)))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression throw (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Exception)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))))))))))))))))))))))))))))))))))) (semi ;) })))) (semi \r\n))) <EOF>)

Testing MultiVariableDeclarations.kt...
line 2:15 no viable alternative at input '\r\n'
line 3:4 no viable alternative at input 'val'
line 3:20 no viable alternative at input '\r\n'
line 4:4 no viable alternative at input 'val'
line 4:18 no viable alternative at input '\r\n'
line 5:4 no viable alternative at input 'val'
line 5:28 no viable alternative at input '\r\n'
line 6:4 no viable alternative at input 'val'
line 6:23 no viable alternative at input '\r\n'
line 7:4 no viable alternative at input 'val'
line 7:23 no viable alternative at input '\r\n'
line 8:4 no viable alternative at input 'var'
line 8:15 no viable alternative at input '\r\n'
line 9:4 no viable alternative at input 'var'
line 9:20 no viable alternative at input '\r\n'
line 10:4 no viable alternative at input 'var'
line 10:18 no viable alternative at input '\r\n'
line 11:4 no viable alternative at input 'var'
line 11:28 no viable alternative at input '\r\n'
line 12:4 no viable alternative at input 'var'
line 12:23 no viable alternative at input '\r\n'
line 13:4 no viable alternative at input 'var'
line 15:4 no viable alternative at input 'val'
line 16:4 extraneous input 'val' expecting {NL, DOT}
line 17:4 extraneous input 'val' expecting {NL, DOT}
line 18:12 no viable alternative at input '(a,:'
line 19:12 no viable alternative at input '(a,:'
line 20:12 no viable alternative at input '(a,='
line 25:11 mismatched input ':' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) , (variableDeclaration (simpleIdentifier b)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) semi \r\n)))) semi (statement (declaration (localPropertyDeclaration (propertyDeclaration var (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) , (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi \r\n) \r\n)))) semi))))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type ( ) = 1) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type ( , a ) = 1) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , ) = 1)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , : Int ) = 1)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , : Int , ) = 1)) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , = 1))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( a , b = 1))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ( 1 ) = 1))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (multiVariableDeclaration ( (variableDeclaration (simpleIdentifier a)) )))))) : Int = 1 val T . ( a ) : Int = 1 } val ( a , b ) = 1 val Int . ( a , b ) = 1 val ( a , b ) : Int = 1 class X { val ( a , b ) = 1 val Int . ( a , b ) = 1 val ( a , b ) : Int = 1 })

Testing NamedClassObject.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier Companion))) (semi \r\n \r\n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier B))) (semi \r\n \r\n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (simpleIdentifier C) (classBody { }))) (semi \r\n \r\n)) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object \r\n \r\n))) (classMemberDeclaration (memberObjectDeclaration (objectDeclaration object (simpleIdentifier C) \r\n))) }))) (semi \r\n))) <EOF>)

Testing namelessObjectAsEnumMember.kt...
line 6:10 extraneous input 'object' expecting {NL, AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'sealed', 'annotation', 'data', 'inner', 'abstract', 'final', 'open', LabelReference}
line 7:0 extraneous input '}' expecting {NL, AT, FILE, 'class', 'interface', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'sealed', 'annotation', 'data', 'inner', 'abstract', 'final', 'open', LabelReference}
(file (kotlinFile (preamble \r\n) (topLevelObject (topClassDeclaration (visibilityModifier public) enum (enumClassDeclaration class (simpleIdentifier A) (enumClassBody { \r\n (enumEntries (enumEntry (simpleIdentifier A)) , \r\n (enumEntry (simpleIdentifier B))) ; \r\n \r\n (classMemberDeclaration (nestedClassDeclaration inner object \r\n classDeclaration)) }))) (semi \r\n))) <EOF>)

Testing NewlinesInParentheses.kt...
line 28:4 no viable alternative at input 'when(e){\r\nisT\r\n<X>\r\n->a\r\ninf\r\n('
line 24:4 mismatched input 'is' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) \r\n (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator +) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) )))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) }))))))))))))))))) )))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) }))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) )))))))))))))))))) (semi \r\n))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d)))))))))))))))))) ])))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d))))))))))))))))))) }))))))))))))))))) ])))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (arrayAccess [ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d))))))))))))))))))) }))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d)))))))))))))))))) ])))))))))))))))) (semi \r\n))))) (semi \r\n) when ( e ) {)))) (semi \r\n))) is T \r\n < X > \r\n -> a \r\n in f \r\n ( ) -> a \r\n !is  T \r\n < X > -> a \r\n !in  f \r\n ( ) -> a \r\n f \r\n ( ) -> a \r\n } \r\n val f = a is T \r\n < X > \r\n })

Testing NewLinesValidOperations.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier str)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " ")))))))))))))))))) (semi \r\n))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str) \r\n \r\n . (simpleIdentifier length))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str)))) (postfixUnaryOperator \r\n \r\n (memberAccessOperator ? .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier length))))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str)))))) (asExpressionTail \r\n \r\n (asOperator as) (type (typeReference (userType (simpleUserType (simpleIdentifier String))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str)))))) (asExpressionTail \r\n \r\n (asOperator as?) (type (typeReference (userType (simpleUserType (simpleIdentifier String))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier str))))))))))) \r\n \r\n ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true))))))))))))))) \r\n \r\n || (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false)))))))))))))))))) (semi \r\n \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false)))))))))))))) \r\n \r\n && (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing NonTypeBeforeDotInBaseClass.kt...
line 2:18 mismatched input 'super' expecting {NL, AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier ClassB) (primaryConstructor ( )) (classBody { \r\n (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier ClassC) (delegationSpecifiers : super . ClassA ( )) (classBody { \r\n }))) (semi \r\n)) }))) (semi \r\n))) <EOF>)

Testing NotIsAndNotIn.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))) (isOperator !is ) (type (typeReference (userType (simpleUserType (simpleIdentifier B)))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))) (inOperator !in ) (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier B))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier isBoolean)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier inRange)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) ))))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing ObjectLiteralAsStatement.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier main)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier args) : (type (typeReference (userType (simpleUserType (simpleIdentifier Array) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) >)))))) )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (objectLiteral object (delegationSpecifiers : (delegationSpecifier (constructorInvocation (userType (simpleUserType (simpleIdentifier Thread))) (callSuffix (valueArguments ( )))))) (classBody { \r\n })))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier run)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi \r\n \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (objectLiteral object (classBody { \r\n }))))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing ParameterNameMising.kt...
line 1:13 mismatched input '<' expecting {NL, COLON}
line 6:13 mismatched input '<' expecting {NL, COLON}
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier Array) < String >)) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 42))))))))))))))))))))) (semi \r\n) (statement (assignment (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (assignmentOperator +=) (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier bar)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier Array) < String >) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier array)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " "))))))))))))))))))) ))))))))))))))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier x) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 42))))))))))))))))))))) (semi \r\n) (statement (assignment (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (assignmentOperator +=) (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing ParameterType.kt...
line 1:11 mismatched input ')' expecting {NL, COLON}
line 2:12 mismatched input '=' expecting {NL, COLON}
line 5:27 mismatched input ')' expecting {NL, COLON}
line 6:16 mismatched input ')' expecting {NL, COLON}
line 17:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 18:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
line 18:15 no viable alternative at input '(b='
line 19:8 extraneous input 'fun' expecting {NL, '(', LCURL, ADD, SUB, INCR, DECR, EXCL, COLONCOLON, Q_COLONCOLON, AT, RETURN_AT, CONTINUE_AT, BREAK_AT, FILE, 'import', 'object', 'constructor', 'by', 'companion', 'init', 'this', 'super', 'where', 'if', 'when', 'try', 'catch', 'finally', 'for', 'do', 'while', 'throw', 'return', 'continue', 'break', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, QUOTE_OPEN, '"""', RealLiteral, LongLiteral, IntegerLiteral, HexLiteral, BinLiteral, BooleanLiteral, 'null', Identifier, LabelReference, LabelDefinition, CharacterLiteral, Inside_Literal}
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test1)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a))) )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test2)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4)))))))))))))))))) )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test3)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) )) (functionBody (block { })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test4)) (functionValueParameters ( (functionValueParameter (annotations (annotation @ann (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier parameter))))))))))))))))))) )))) (parameter (simpleIdentifier a))) )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test5)) (functionValueParameters ( (functionValueParameter (annotations (annotation @ann)) (parameter (simpleIdentifier a))) )) (functionBody (block { })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (tryExpression try (block { \r\n \r\n }) \r\n (catchBlock catch ( (simpleIdentifier a) : (userType (simpleUserType (simpleIdentifier Int))) ) (block { \r\n \r\n })))))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation ( b = 4 ) { })))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = fun (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))) (asExpressionTail (asOperator :) (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))))))))))))) )))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) (semi \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (functionType ( (type (typeReference (userType (simpleUserType (simpleIdentifier A))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (functionType ( (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Unit))))))))) \r\n \r\n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (primaryConstructor ( (classParameters (classParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))) )))))) <EOF>)

Testing ParameterType_ERR.kt...
line 1:12 mismatched input ')' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 3:21 mismatched input '(' expecting {NL, COLON}
line 3:31 mismatched input ')' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test1)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : type)) )) (functionBody (block { })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier inlineOptions) ( InlineOp)) )))))) ) { } \r\n \r\n fun test2 ( ann ( parameter ) ) { } \r\n fun test3 ( ann ) { } \r\n \r\n fun test ( ) { \r\n try { \r\n \r\n } \r\n catch ( a ) { \r\n \r\n } \r\n catch ( a : ) { \r\n \r\n } \r\n } \r\n \r\n val a = fun ( b : ) { } \r\n \r\n val a : ( a : ) -> Unit \r\n \r\n class A ( a ) \r\n class A ( a : ))

Testing Precedence.kt...
line 32:8 no viable alternative at input 'a=b->'
line 33:2 mismatched input 'a' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))) (postfixUnaryOperator (callSuffix (valueArguments ( )))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (postfixUnaryOperator ++) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 4)))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator ++) (prefixUnaryOperator --) (prefixUnaryOperator !) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x))))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) ))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier a))))) , (type (typeReference (userType (simpleUserType (simpleIdentifier b))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x))))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))) ))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier f)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))))))))))))) ))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))) ))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))) (inOperator in) (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier d))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b) . (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))) (postfixUnaryOperator ++)))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator --) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a) . (simpleIdentifier b)))) (postfixUnaryOperator ++)))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (prefixUnaryOperator --) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))) (multiplicativeOperator *) (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))) .. (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b-1))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))) .. (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2))))))))) (simpleIdentifier foo) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))) .. (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))) (simpleIdentifier foo) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 2)))))))))) ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))) (simpleIdentifier bar) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3)))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))) (simpleIdentifier b) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c)))))))))) (simpleIdentifier d) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))) (simpleIdentifier f) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier g))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))) ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))) (inOperator in) (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))) ?: (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a))))))))))))) (comparisonOperator <) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))) (equalityOperator ==) (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))) (comparisonOperator >) (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))) (equalityOperator !=) (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))) && (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))) || (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b))))))))))))))) && (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier c))))))))))))))))))) (semi \r\n) a = b -> c)))) (semi \r\n))) a = b || c \r\n \r\n t as Any < T > ? \r\n t as Any . Any < T > . Any < T > \r\n t as ( ) -> T \r\n t as? Any < T > ? \r\n t as? Any . Any < T > . Any < T > \r\n t as? ( ) -> T \r\n \r\n t as Any < T > ? * 1 \r\n t as Any . Any < T > . Any < T > * 1 \r\n t as ( ) -> T * 1 \r\n t as? Any < T > ? * 1 \r\n t as? Any . Any < T > . Any < T > * 1 \r\n t as? ( ) -> T * 1 \r\n } \r\n)

Testing PrimaryConstructorModifiers_ERR.kt...
line 3:22 no viable alternative at input 'private{'
line 5:0 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (inheritanceModifier open) (classDeclaration class (simpleIdentifier A) \r\n \r\n))) (topLevelObject (topClassDeclaration (inheritanceModifier open) (classDeclaration class (simpleIdentifier AB)))) topLevelObject (topLevelObject private { \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n))) } \r\n \r\n class A1 { \r\n \r\n } \r\n \r\n open class B < T : A > private ( ) { \r\n \r\n } \r\n)

Testing Properties.kt...
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar) . (simpleIdentifier foo) . (simpleIdentifier bar)))))))))))))))))) (semi \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (simpleIdentifier foo)) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \r\n \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo) : (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))))))))))))) (semi \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \r\n (getter get ( ) (functionBody (block { }))) \r\n (setter set ( (simpleIdentifier sad) ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))))))) (semi \r\n \r\n \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) (getter get \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) (setter set \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) \r\n (getter get \r\n) (setter (visibilityModifier private) set \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \r\n (getter get ( ) (functionBody (block { }))) \r\n (setter set \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) \r\n (getter get \r\n) (setter set ( (simpleIdentifier sad) ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))))))) (semi \r\n \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi ;) (getter get \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi ;) (getter get) (setter set \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \r\n) (getter get \r\n) (setter (visibilityModifier private) set \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \r\n) (getter get ( ) (functionBody (block { }))) \r\n (setter set \r\n \r\n)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier foo))))) . (variableDeclaration (simpleIdentifier bar)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \r\n) (getter get \r\n) (setter set ( (simpleIdentifier sad) ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))))))))))))))))))))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))) (semi \r\n) (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (typeReference (userType (simpleUserType (simpleIdentifier IList) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier T)))))) >)))) . (variableDeclaration (simpleIdentifier lastIndex) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \r\n (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (thisExpression this))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier size)))))))))) (additiveOperator -) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))) \r\n \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Int)))) ?)) . (variableDeclaration (simpleIdentifier opt) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Int)))) ?)) . (variableDeclaration (simpleIdentifier opt) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))))))) <EOF>)

Testing PropertiesFollowedByInitializers.kt...
line 2:18 extraneous input '=' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 3:2 extraneous input 'var' expecting {NL, RCURL}
line 3:25 mismatched input 'set' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Foo) (primaryConstructor ( )) (classBody { \r\n (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) (getter get)))) = 1 \r\n <missing RCURL>)))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int)))))) (getter get ( ) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi ;))) set \r\n var b1 : Int get ( ) = 1 ; set { 1 } \r\n val b2 : Int get \r\n init { \r\n \r\n } \r\n val b3 : Int get { \r\n return 1 \r\n } \r\n val b4 : Int get ; init { \r\n } \r\n \r\n var b5 : Int get abstract set \r\n var b6 : Int get @ [ a ] abstract set \r\n var b7 : Int get @ [ a ] abstract { } \r\n var b8 : Int get @a abstract set \r\n var b9 : Int get @a abstract { } \r\n } \r\n \r\n class PublicVar ( ) { public var foo = 0 ; } \r\n class PublicVar ( ) { public var foo = 0 ; var x : Int } \r\n class PublicVar ( ) { public var foo = 0 } \r\n class PublicVar ( ) { public var foo get set } \r\n class PublicVar ( ) { public var foo get set } \r\n \r\n val now : Long get ( ) = System . currentTimeMillis ( ) ; fun foo ( ) = now \r\n)

Testing Properties_ERR.kt...
line 1:4 mismatched input '-' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:6 mismatched input '{' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration var - { })) (semi \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)))))) { } \r\n var f : \r\n val foo : \r\n val : \r\n val : Int \r\n val @ [ a foo = foo val foo . bar . val foo . val @a foo : = bar val foo . bar public ( ) { } ( ) = foo val f . d . - = f val foo get ( ) -)

Testing PropertyInvokes.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _some))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier __some))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1_1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _some))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _1some))))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier _1_some))))))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing QuotedIdentifiers.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (annotations (annotation @`return`)) (functionDeclaration fun (identifier (simpleIdentifier `package`)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier `class`)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier `$`) \r\n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier `$$`) \r\n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier ` `) \r\n))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier `1`) \r\n)))) <EOF>)

Testing Reserved.kt...
line 2:4 extraneous input 'typeof' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 6:4 no viable alternative at input 'yield\r\ntypeof'
line 6:4 mismatched input 'typeof' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier yield)) (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun typeof (functionValueParameters ( )) (functionBody (block { })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier test)) (functionValueParameters ( )) (functionBody (block { \r\n yield)))) (semi \r\n))) typeof \r\n })

Testing SemicolonAfterIf.kt...
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody (block { (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier x)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier a)))))))))))))))))))))) (semi ;) (statement (declaration (localPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier y)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))) (postfixUnaryOperator ++))))))))))))))))))) (semi ;) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (ifExpression if ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier y)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))) (equalityOperator !=) (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ) (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant -1)))))))))))))))))))))))))))))))))))))))))))))))))))))) (semi ;) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))))))))))))))))))))) (semi ;) })))) (semi \r\n))) <EOF>)

Testing semicolonBetweenDeclarations.kt...
line 4:9 no viable alternative at input '1;;'
line 16:27 extraneous input ';' expecting {NL, LCURL}
line 18:4 extraneous input 'companion' expecting {NL, LCURL}
line 21:7 no viable alternative at input 'foo;'
line 22:3 extraneous input ';' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 23:0 no viable alternative at input '\r\nclass'
line 24:7 extraneous input ';' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 26:15 extraneous input ';' expecting {NL, '('}
line 27:0 extraneous input '}' expecting {NL, '('}
(file (kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo))) (semi ; \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo1)) (functionValueParameters ( )) (functionBody (block { })))) (semi ; \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x)) = (expression (disjunction (conjunction (equality (comparison (infixOperation 1 ;; ;;)))))) (semi \r\n)))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier A) (primaryConstructor ( )) (classBody { \r\n (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi ;) \r\n \r\n))) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localClassDeclaration (classDeclaration class (simpleIdentifier A1))))) (semi ; \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))) (semi ;))))) (semi \r\n) })))) (semi \r\n)) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier bar)) (functionValueParameters ( )))) (semi ; \r\n \r\n)) (classMemberDeclaration (anonymousInitializer init (block { })) (semi ; \r\n \r\n)) (classMemberDeclaration (secondaryConstructor constructor (functionValueParameters ( )) : (constructorDelegationCall super (valueArguments ( ))) ; \r\n \r\n (block <missing LCURL>))) (classMemberDeclaration (memberObjectDeclaration (companionObject companion object (classBody { }))) (semi ;)) \r\n }))) (semi ; \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun foo)) (semi ; \r\n)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val ;)) (semi \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier B) (classBody { \r\n (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val ; \r\n (variableDeclaration (simpleIdentifier init)) (semi ;))) (semi \r\n)) (classMemberDeclaration (secondaryConstructor constructor ; \r\n functionValueParameters)) }))) (semi \r\n))) <EOF>)

Testing SimpleClassMembers.kt...
line 16:8 no viable alternative at input '\r\n\r\ntypealias'
line 16:8 extraneous input 'typealias' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 17:4 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \r\n \r\n (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \r\n (classMemberDeclaration (memberObjectDeclaration (objectDeclaration object (simpleIdentifier foo) (classBody { \r\n \r\n }))) (semi \r\n \r\n)) (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier Bar) (classBody { }))) (semi \r\n \r\n)) (classMemberDeclaration (memberFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n \r\n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier x)) \r\n \r\n))) (classMemberDeclaration (memberPropertyDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier f)))) (semi \r\n \r\n)))))) <missing RCURL>)))) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n))) } \r\n \r\n class Bar { \r\n object foo { \r\n companion object { \r\n \r\n } \r\n \r\n private companion object { \r\n \r\n } \r\n \r\n private companion object : Fooo { \r\n \r\n } \r\n \r\n private companion object : Fooo , Bar by foo { \r\n \r\n } \r\n \r\n private companion object : Fooo , Bar by foo , Goo ( ) \r\n } \r\n \r\n class Bar { } \r\n \r\n fun foo ( ) \r\n \r\n val x \r\n \r\n var f \r\n \r\n typealias foo = bar \r\n } \r\n \r\n fun foo ( ) \r\n \r\n val x \r\n \r\n var f \r\n \r\n typealias foo = bar \r\n \r\n companion object { \r\n \r\n } \r\n \r\n private companion object { \r\n \r\n } \r\n \r\n private companion object : Fooo { \r\n \r\n } \r\n \r\n private companion object : Fooo , Bar by foo { \r\n \r\n } \r\n \r\n private companion object : Fooo , Bar by foo , Goo ( ) \r\n \r\n \r\n } \r\n)

Testing SimpleClassMembers_ERR.kt...
line 3:17 extraneous input '-' expecting {NL, RCURL, AT, FILE, 'class', 'interface', 'fun', 'object', VAL, VAR, 'constructor', 'companion', 'init', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', 'suspend', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', LabelReference}
line 5:4 extraneous input 'class' expecting {NL, RCURL}
line 6:4 no viable alternative at input '\r\nsdfsd'
line 6:4 mismatched input 'sdfsd' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { \r\n \r\n (classMemberDeclaration (nestedClassDeclaration (classDeclaration class (simpleIdentifier foo) (classBody { })))) - \r\n \r\n <missing RCURL>)))) (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Bar) (classBody {))) (semi \r\n))) sdfsd \r\n } \r\n \r\n fun foo ( ) \r\n \r\n val x \r\n \r\n var f \r\n \r\n typealias foo = ; \r\n })

Testing SimpleExpressions.kt...
line 24:26 no viable alternative at input 'object:Foo{'
line 24:28 mismatched input ',' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Unit))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0x10)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant '1')))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent dsf) "))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (multiLineStringLiteral """ (multiLineStringContent dsf) """))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10.0)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier dbl))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier flt))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10.0))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier dbl))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier lng))))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant true)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier this))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier super)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier sdf))))) >)))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (parenthesizedExpression ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Triple)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 10)))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent A) "))))))))))))))))))) , (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 0xf)))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar))))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier A))))) >) (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar))))))))))))))))))) ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier Foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (typeReference (userType (simpleUserType (simpleIdentifier bar))))) >) (valueArguments ( ))))))))))))))))))) , (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier foo)))))) = (expression (disjunction (conjunction (equality (comparison (infixOperation object))))))) <missing ')'>) : (type (typeReference (userType (simpleUserType (simpleIdentifier Foo))))) (functionBody (block { })))))) , a : foo = throw Foo ( ) , a : foo = return 10 , a : foo = break , a : foo = break@ la , a : foo = continue , a : foo = continue@ la , a : foo = 10 , a : foo = 10 , a : foo = 10 , a : foo = 10 , a : foo = 0xffffffff . lng ) { \r\n return 10 \r\n return \r\n 10 \r\n break \r\n la@ \r\n break@la \r\n continue \r\n la@ \r\n continue@la \r\n } \r\n)

Testing SimpleModifiers.kt...
line 14:0 no viable alternative at input 'internal\r\nin'
line 14:0 mismatched input 'in' expecting <EOF>
(file (script (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \r\n \r\n)) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier abstract)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier open)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier open)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier annotation)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier override)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier open)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier abstract)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier private)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier protected)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier public)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation internal)))))) (semi \r\n)) in \r\n out \r\n class Bar < abstract \r\n open \r\n enum \r\n open \r\n annotation \r\n override \r\n open \r\n abstract \r\n private \r\n protected \r\n public \r\n internal \r\n in \r\n out \r\n T > { \r\n val abstract \r\n val open \r\n val enum \r\n val open \r\n val annotation \r\n val override \r\n val open \r\n val abstract \r\n val private \r\n val protected \r\n val public \r\n val internal \r\n val lazy \r\n } \r\n)

Testing SoftKeywords.kt...
line 17:0 no viable alternative at input 'internal\r\nin'
line 17:0 mismatched input 'in' expecting <EOF>
(file (script (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \r\n \r\n) (importHeader import (identifier (simpleIdentifier foo))) (semi \r\n \r\n)) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier public)))))))))) (simpleIdentifier protected) (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier private)))))))))) (simpleIdentifier internal) \r\n (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier abstract)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier open)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier open)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier annotation)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier override)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier open)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier abstract)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier private)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier protected)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier public)))))))))))))))))) (semi \r\n) (expression (disjunction (conjunction (equality (comparison infixOperation))))) (expression (disjunction (conjunction (equality (comparison (infixOperation internal)))))) (semi \r\n)) in \r\n out \r\n suspend \r\n class Bar < abstract , abstract enum : T , out open , \r\n public protected private internal abstract \r\n open \r\n enum \r\n open \r\n annotation \r\n override \r\n open \r\n abstract \r\n private \r\n protected \r\n public \r\n internal open \r\n > ( a : B ) : A by b { \r\n public protected private internal val abstract \r\n val open \r\n val enum \r\n val open \r\n val annotation \r\n val override \r\n val open \r\n val abstract \r\n val private \r\n val protected \r\n val public \r\n val internal \r\n val lazy \r\n val wraps \r\n val import \r\n val where \r\n val by \r\n val get \r\n val set \r\n val public \r\n val private \r\n val protected \r\n val internal \r\n val field \r\n val property \r\n val receiver \r\n val param \r\n val setparam \r\n val lateinit \r\n val const \r\n val suspend \r\n val coroutine \r\n get ( ) = a \r\n set ( S : s ) { } \r\n \r\n \r\n public protected private internal \r\n fun abstract ( ) : abstract \r\n fun open ( ) : open \r\n fun enum ( ) : enum \r\n fun open ( ) : open \r\n fun annotation ( ) : annotation \r\n fun override ( ) : override \r\n fun open ( ) : open \r\n fun abstract ( ) : abstract \r\n fun private ( ) : private \r\n fun protected ( ) : protected \r\n fun public ( ) : public \r\n fun internal ( ) : internal \r\n fun lazy ( ) : lazy \r\n fun wraps ( ) : wraps \r\n fun import ( ) : import \r\n fun where ( ) : where \r\n fun by ( ) : by \r\n fun get ( ) : get \r\n fun set ( ) : set \r\n fun public ( ) : public \r\n fun private ( ) : private \r\n fun protected ( ) : protected \r\n fun internal ( ) : internal \r\n fun field ( ) : field \r\n fun property ( ) : property \r\n fun receiver ( ) : receiver \r\n fun param ( ) : param \r\n fun setparam ( ) : setparam \r\n fun lateinit ( ) : lateinit \r\n fun const ( ) : const \r\n \r\n fun test ( abstract : t , open : t , enum : t , open : t , annotation : t , override : t , open : t , abstract : t , private : t , protected : t , public : t , internal : t , lazy : t , wraps : t , import : t , where : t , by : t , get : t , set : t , public : t , private : t , protected : t , internal : t , field : t , property : t , receiver : t , param : t , setparam : t , lateinit : t , const : t , public protected private internal abstract open enum open annotation override open abstract private protected public internal open : t ) \r\n \r\n } \r\n \r\n \r\n class F ( val foo : bar , abstract : t , open : t , enum : t , open : t , annotation : t , override : t , open : t , abstract : t , private : t , protected : t , public : t , internal : t , lazy : t , wraps : t , import : t , where : t , by : t , get : t , set : t , public : t , private : t , protected : t , internal : t , field : t , property : t , receiver : t , param : t , setparam : t , lateinit : t , const : t , public protected private internal abstract open enum open annotation override open abstract private protected public internal open : b ) { \r\n \r\n } \r\n)

Testing SoftKeywordsInTypeArguments.kt...
line 8:0 no viable alternative at input 'Foo<outInt>\r\n\r\n}'
line 8:0 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier Foo) (typeParameters < (typeParameter (varianceAnnotation out) (simpleIdentifier abstract)) , (typeParameter (varianceAnnotation out) (simpleIdentifier out)) >) (classBody { }))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier f)) (functionValueParameters ( )) (functionBody (block { \r\n \r\n \r\n Foo < out Int >)))) (semi \r\n \r\n))) } \r\n \r\n)

Testing StringTemplates.kt...
line 13:5 token recognition error at: '$"'
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier demo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier abc)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " ")))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier asd)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier bar)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 5))))))))))))))))))))) (semi \r\n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier map)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier f) : (type (nullableType (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))))) ?)))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))) (semi \r\n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier buzz)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier f) : (type (nullableType (typeReference (functionType ( ) -> (type (typeReference (userType (simpleUserType (simpleIdentifier Any))))))) ?)))) )) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier sdf)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))))))))))))))))) (semi \r\n) (statement (declaration (localPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier foo)) = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 3))))))))))))))))) (semi ;))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $this) (lineStringContent  must be) (lineStringContent $as) (lineStringContent $t) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $abc) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $abc) (lineStringContent \") (lineStringContent \r\n    ) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent $) (lineStringContent .) (lineStringContent $) (lineStringContent .asdf) (lineStringContent $\t) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent asd) (lineStringContent \$) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent asd) (lineStringContent $a) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent asd) (lineStringContent $a) (lineStringContent $asd) (lineStringContent $) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent fosdfasdo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 100))))))))))))))))) }) (lineStringContent }sdsdfgdsfsdf) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier map)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) })))))))))))))))))) }) (lineStringContent sdfsdf) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier map)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) "))))))))))))))))))) })))))))))))))))))) }) (lineStringContent sdfsdf) "))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier bar)))))))) (additiveOperator +) (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier map)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent foo) (lineStringContent $sdf) (lineStringExpression ${ (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier buzz)))) (postfixUnaryOperator (callSuffix (annotatedLambda (functionLiteral { })))))))))))))))))) }) "))))))))))))))))))) })))))))))))))))))) }) (lineStringContent sdfsdf) "))))))))))))))))))) (semi \r\n) })))))) <EOF>)

Testing Super.kt...
line 5:10 no viable alternative at input 'super<>'
line 6:4 mismatched input 'super' expecting <EOF>
(file (kotlinFile (preamble \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (superExpression super))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi ; \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (superExpression super < (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))) >))) (postfixUnaryOperator (memberAccessOperator .) (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (valueArguments ( ))))))))))))))))))))) (semi ; \r\n) super < > . foo ( ))))) (semi ; \r\n))) super < Int > @label . foo ( ) ; \r\n })

Testing TraitConstructor.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration interface (simpleIdentifier TestTrait) (primaryConstructor ( (classParameters (classParameter val (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier Int))))))) , (classParameter var (parameter (simpleIdentifier b) : (type (typeReference (userType (simpleUserType (simpleIdentifier String))))))) , (classParameter (parameter (simpleIdentifier c) : (type (typeReference (userType (simpleUserType (simpleIdentifier Double)))))))) )) \r\n))) (topLevelObject (topClassDeclaration (classDeclaration interface (simpleIdentifier TestTrait) (primaryConstructor ( )))))) <EOF>)

Testing TripleDot.kt...
line 1:0 no viable alternative at input '...'
(file ... \r\n \r\n fun foo ( ) { \r\n for ( i in 1 .. .2 ) { \r\n \r\n } \r\n \r\n for ( i in 1 .. .2 ) { \r\n \r\n } \r\n })

Testing TryRecovery.kt...
line 11:16 no viable alternative at input 'try{\r\n}catch({}try{}catch(e:{'
line 7:4 mismatched input '}' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier testOpenParens)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (tryExpression try (block { \r\n })))) (postfixUnaryOperator (callSuffix (annotatedLambda (unescapedAnnotation (identifier (simpleIdentifier catch))) (functionLiteral { \r\n }))))))))))))))))))) (semi \r\n \r\n) try {)))) (semi \r\n))) } catch ( { } try { } catch ( e : { } try { } catch ( e : Exception { } } fun testClosedParens ( ) { try { } catch ( ) { } try { } catch ( e ) { } try { } catch ( e : ) { } try { } catch ( e : Exception ) { } try { } catch ( : Exception ) { } try { } catch ( : ) { } } fun testFinally ( ) { try { } catch finally { } try { } catch ( ) finally { } try { } catch ( e : Exception ) finally { } })

Testing TypeAlias.kt...
(file (kotlinFile (preamble (packageHeader package (identifier (simpleIdentifier foo) . (simpleIdentifier bar) . (simpleIdentifier goo))) (semi \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T) : (userType (simpleUserType (simpleIdentifier foo)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B) : (userType (simpleUserType (simpleIdentifier A)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T) : (userType (simpleUserType (simpleIdentifier foo)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B) : (userType (simpleUserType (simpleIdentifier A)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi ; \r\n))) <EOF>)

Testing TypealiasIsKeyword.kt...
line 1:4 mismatched input 'typealias' expecting {NL, '(', AT, LANGLE, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 1:14 mismatched input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val))) (topLevelObject (typeAlias typealias = 0))) <EOF>)

Testing TypeAlias_ERR.kt...
line 2:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 3:0 mismatched input 'typealias' expecting {NL, ASSIGNMENT, LANGLE}
line 4:0 extraneous input 'typealias' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 4:10 extraneous input ';' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 5:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 6:0 no viable alternative at input '\r\ntypealias'
line 6:16 extraneous input ';' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 7:0 extraneous input 'typealias' expecting {NL, '(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 7:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 8:0 no viable alternative at input '\r\ntypealias'
line 8:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:10 extraneous input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 9:16 extraneous input ';' expecting {NL, ASSIGNMENT, LANGLE}
line 10:0 no viable alternative at input '\r\ntypealias'
line 10:10 mismatched input '=' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 12:14 mismatched input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 13:17 mismatched input '>' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', IN, OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 14:18 extraneous input ',' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 17:0 extraneous input 'typealias' expecting {NL, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, 'get', 'set', 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier}
line 17:16 extraneous input 'bar' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (typeAlias typealias \r\n (simpleIdentifier typealias foo \r\n))) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = \r\n type)) (topLevelObject (typeAlias typealias ; \r\n (simpleIdentifier typealias foo ;)) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) = ; \r\n type)) (topLevelObject (typeAlias typealias = (simpleIdentifier foo)) (semi \r\n)) (topLevelObject (typeAlias typealias = \r\n simpleIdentifier)) (topLevelObject (typeAlias typealias = (simpleIdentifier foo) ;) (semi \r\n)) (topLevelObject (typeAlias typealias =) (semi ; \r\n \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) , >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n)) (topLevelObject (typeAlias typealias (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier A) : , (userType (simpleUserType (simpleIdentifier B)))) >) = (type (typeReference (userType (simpleUserType (simpleIdentifier bar)))))) (semi \r\n \r\n)) (topLevelObject (topClassDeclaration (classDeclaration class \r\n (simpleIdentifier typealias foo =))))) bar <EOF>)

Testing TypeConstraints.kt...
(file (kotlinFile preamble (topLevelObject (topClassDeclaration (classDeclaration class (simpleIdentifier foo) (typeParameters < (typeParameter (simpleIdentifier T)) >) (typeConstraints where (typeConstraint (simpleIdentifier T) : (type (typeReference (userType (simpleUserType (simpleIdentifier T))))))) (classBody { \r\n \r\n }))))) <EOF>)

Testing TypeExpressionAmbiguities_ERR.kt...
line 3:16 no viable alternative at input 'fooo<Double?addddd'
line 4:4 mismatched input 'dd' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo)))) (postfixUnaryOperator (callSuffix (typeArguments < (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Int)))) ?)) >) (valueArguments ( ))))))))))))))))))) (semi \r\n) fooo < Double ? addddd > ( ))))) (semi \r\n))) dd < Triple < Int , Int , Int > > ( if ( true ) Triple ( 1 , 1 , 1 ) else Triple ( 2 , 2 , 2 ) ) \r\n foo ( bar < a , b , c > ( d ) ) \r\n foo ( bar < a , b + 1 , c > ( d ) ) \r\n foo ( bar < a , f ( ) , c > ( d ) ) \r\n foo ( bar < a , a : b , c > ( d ) ) \r\n a : b < c \r\n d as Foo < bar \r\n x is Foo < bar \r\n } \r\n)

Testing TypeModifiers.kt...
line 1:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:20 mismatched input '->' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p1) : (type suspend (typeReference (userType (simpleUserType (simpleIdentifier a)))))) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p2) : (type suspend (typeReference (parenthesizedTypeReference ( (typeReference (userType (simpleUserType (simpleIdentifier a)))) ))))))))) -> a \r\n val p3 : suspend ( a ) -> suspend a \r\n val p4 : suspend a . ( ) -> a \r\n val p4a : @a a . ( ) -> a \r\n val p5 : ( suspend a ) . ( ) -> a \r\n val p5a : ( @a a ) . ( ) -> a \r\n val p6 : a < in suspend a > \r\n val p7 : a < out suspend @a a > \r\n val p8 : a < out @a suspend @a a > \r\n val p9 : a < out @ [ a ] suspend @ [ a ] a > \r\n val p10 : suspend a < a > \r\n val p11 : suspend @a a \r\n val p12 : @a suspend a \r\n val p13 : @a suspend @a a \r\n val p14 : @ [ a ] suspend @ [ a ] a \r\n val p15 : suspend ( suspend ( ( ) -> Unit ) ) -> Unit \r\n \r\n @a fun @a a . f1 ( ) { } \r\n fun ( @a a . ( a ) -> a ) . f2 ( ) { } \r\n)

Testing TypeModifiersParenthesized.kt...
line 2:5 mismatched input '<' expecting {NL, DOT}
line 5:24 extraneous input '?' expecting {COMMA, ')'}
line 8:27 mismatched input '<' expecting {COMMA, ')'}
line 11:26 mismatched input '?' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier B) < (simpleUserTypeParameter (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) )))) >)))) . (identifier (simpleIdentifier receiverArgument)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (type (typeReference (userType (simpleUserType (simpleIdentifier B))))) < ())) topLevelObject (topLevelObject @A C ) ? > . receiverArgumentN ( ) \r\n \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameter)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))))) )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameterN)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))))) ? )) \r\n \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameterArgument)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier B) < (simpleUserTypeParameter (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) )))) >)))))) )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier parameterArgumentN)) (functionValueParameters ( (functionValueParameter (parameter (simpleIdentifier a) : (type (typeReference (userType (simpleUserType (simpleIdentifier B))))))) < ()))) topLevelObject (topLevelObject @A C ) ? > ) \r\n \r\n) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier returnValue)) (functionValueParameters ( )) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier returnValueN)) (functionValueParameters ( )) : (type (parenthesizedType ( (type (annotations (annotation @A)) (typeReference (userType (simpleUserType (simpleIdentifier C))))) ))))))) ? \r\n \r\n fun < T > returnTypeParameterValue ( ) : ( @A T ) \r\n fun < T > returnTypeParameterValueN ( ) : ( @A T ) ? \r\n \r\n fun returnArgument ( ) : B < ( @A C ) > \r\n fun returnArgumentN ( ) : B < ( @A C ) > ? \r\n \r\n val lambdaType : ( @A ( ) ( ( ) -> C ) ) \r\n val lambdaTypeN : ( @A ( ) ( ( ) -> C ) ) ? \r\n \r\n val lambdaParameter : ( ( @A C ) ) -> C \r\n val lambdaParameterN : ( ( @A C ) ) ? -> C \r\n \r\n val lambdaReturnValue : ( ) -> ( @A C ) \r\n val lambdaReturnValueN : ( ) -> ( @A C ) ? \r\n \r\n val lambdaReceiver : ( @A C ) . ( ) -> C \r\n val lambdaReceiverN : ( @A C ) ? . ( ) -> C \r\n \r\n val suspendT : suspend T \r\n val suspendTN : suspend T ? \r\n \r\n val suspendFun : suspend ( ) -> Unit \r\n val suspendFunN : ( suspend ( ) -> Unit ) ? \r\n \r\n val suspendExtFun : suspend Any . ( ) -> Unit \r\n val suspendExtFunN : ( suspend Any . ( ) -> Unit ) ? \r\n \r\n val suspendFunReturnValueN : suspend ( ) -> Unit ? \r\n val suspendFunNReturnValueN : ( suspend ( ) -> Unit ? ) ? \r\n \r\n val suspendExtFunReceiverN : suspend Any ? . ( ) -> Unit \r\n val suspendExtFunNReceiverN : ( suspend Any ? . ( ) -> Unit ) ? \r\n \r\n val suspendFunReturnValueN : suspend ( ) -> Unit ? \r\n val suspendFunNReturnValueN : ( suspend ( ) -> Unit ? ) ? \r\n \r\n val suspendExtFunReceiverN : suspend Any ? . ( ) -> Unit \r\n val suspendExtFunNReceiverN : ( suspend Any ? . ( ) -> Unit ) ? \r\n)

Testing TypeModifiers_ERR.kt...
line 1:8 mismatched input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:0 extraneous input 'val' expecting {AT, FILE, 'fun', FIELD, PROPERTY, GET, SET, RECEIVER, PARAM, SETPARAM, DELEGATE, 'public', 'private', 'internal', 'tailrec', 'operator', 'inline', 'external', 'suspend', LabelReference}
line 2:8 extraneous input 'suspend' expecting {'(', AT, FILE, 'import', 'constructor', 'by', 'companion', 'init', 'where', 'catch', 'finally', OUT, FIELD, PROPERTY, GET, SET, 'get', 'set', RECEIVER, PARAM, SETPARAM, DELEGATE, 'dynamic', 'public', 'private', 'protected', 'internal', 'enum', 'sealed', 'annotation', 'data', 'inner', 'tailrec', 'operator', 'inline', 'infix', 'external', OVERRIDE, 'abstract', 'final', 'open', 'lateinit', VARARG, NOINLINE, CROSSINLINE, REIFIED, Identifier, LabelReference}
line 2:20 mismatched input '->' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p1) : type)))) (topLevelObject (topFunctionDeclaration (functionModifier suspend \r\n) functionDeclaration)) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier p2) : (type suspend (typeReference (parenthesizedTypeReference ( (typeReference (userType (simpleUserType (simpleIdentifier a)))) ))))))))) -> \r\n val p3 : suspend ( suspend ) -> \r\n val p4 : suspend ( suspend -> val p5 : suspend ( a ) -> suspend val p6 : suspend a . ( ) -> val p7 : suspend a . ( suspend ) -> val p8 : a < suspend in a > val p9 : a < in suspend a val p10 : a < in suspend , a > val p11 : a < suspend in a val p12 : a < suspend in)

Testing TypeParametersBeforeName.kt...
line 2:19 mismatched input '(' expecting {NL, DOT}
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n))) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier foo))))) ( ))) (semi \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (typeParameters < (typeParameter (simpleIdentifier A)) , (typeParameter (simpleIdentifier B)) >) (type (annotations (annotationList @ [ (unescapedAnnotation (identifier (simpleIdentifier a))) ])) (typeReference (userType (simpleUserType (simpleIdentifier T))))) . (identifier (simpleIdentifier foo)) (functionValueParameters ( )) \r\n \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (typeParameters < (typeParameter (simpleIdentifier A)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier List) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) >)))) . (variableDeclaration (simpleIdentifier foo)) \r\n))) (topLevelObject (topPropertyDeclaration (propertyDeclaration var (typeParameters < (typeParameter (simpleIdentifier A)) >) (type (typeReference (userType (simpleUserType (simpleIdentifier List) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier A)))))) >)))) . (variableDeclaration (simpleIdentifier foo)))))) <EOF>)

Testing When.kt...
line 38:8 no viable alternative at input 'when(val'
line 39:4 mismatched input 'is' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (jumpExpression return (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant false))))))))))))))))))))))))))))))))))) (semi \r\n \r\n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier a)) (functionValueParameters ( )) (functionBody = (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (functionLiteral { (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier x)))))))))))))))))) ) { (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier b)))))))))))))))))))) }))))))))))))))))))) })))))))))))))))))))))) (semi \r\n \r\n \r\n) (statement (declaration (localFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier b)) (functionValueParameters ( )) (functionBody (block { })))))) (semi \r\n \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \r\n \r\n }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \r\n (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier a))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \r\n (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier Tree) < (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier a)))))) , (simpleUserTypeParameter (type (typeReference (userType (simpleUserType (simpleIdentifier b)))))) >)))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant null)))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1)))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier A) . (simpleIdentifier b))))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 1.0)))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (literalConstant 'c')))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (lineStringLiteral " (lineStringContent sadfsa) "))))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) (whenEntry (whenCondition (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (stringLiteral (multiLineStringLiteral """ (multiLineStringContent ddd) """))))))))))))))))))) -> (controlStructureBody (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier foo))))))))))))))))))) (semi \r\n)) }))))))))))))))))))) (semi \r\n) (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier when)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier when)))) (postfixUnaryOperator (callSuffix (valueArguments ( (valueArgument (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e))))))))))))))))))) )) (annotatedLambda (functionLiteral { }))))))))))))))))))) )) (annotatedLambda (functionLiteral { })))))))))))))))))) ) { \r\n \r\n }))))))))))))))))))) (semi \r\n) })))) (semi \r\n \r\n)) (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n when ())))) (topLevelObject (topPropertyDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier a)) = (expression (disjunction (conjunction (equality (comparison (infixOperation e ) {)))))) semi \r\n)))) is Tree -> c \r\n is a . a < a , b > -> c \r\n is package . a . a < a , b > -> c \r\n in 1 .. 2 -> dsf \r\n !in  2 -> sd \r\n !is  t -> d \r\n ( foo ) -> Bar -> fgpp \r\n is Pair < Int , Int > -> 2 \r\n else -> foo \r\n } \r\n } \r\n \r\n fun foo ( ) { \r\n when ( val a = e ) { \r\n is Tree , \r\n is a < a , b > -> c \r\n 1 , foo ( ) , bar , 2 + 3 , \r\n is a < a , b > -> c \r\n } \r\n } \r\n \r\n fun whenWithoutCondition ( i : Int ) { \r\n val j = 12 \r\n when { \r\n 3 -> -1 \r\n i == 3 -> -1 \r\n j < i , j == i -> -1 \r\n i is Int -> 1 \r\n else -> 2 \r\n } \r\n } \r\n \r\n fun ifDoesntCaptureElse ( x : Int ) { \r\n when ( x ) { \r\n 2 -> if ( 1 ) 3 \r\n else -> 6 \r\n } \r\n })

Testing When_ERR.kt...
line 5:8 no viable alternative at input 'when(e){\r\nis->'
line 5:4 mismatched input 'is' expecting <EOF>
(file (kotlinFile preamble (topLevelObject (topFunctionDeclaration (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody (block { \r\n (statement (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equality (comparison (infixOperation (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (asExpression (prefixUnaryExpression (postfixUnaryExpression (assignableExpression (primaryExpression (identifier (simpleIdentifier e)))))))))))))))))) ) { \r\n }))))))))))))))))))) (semi \r\n) when ( e ) {)))) (semi \r\n))) is -> foo \r\n !is   -> foo \r\n in -> foo \r\n !in   -> foo \r\n -> foo \r\n else \r\n } \r\n when ( e ) { \r\n is -> \r\n !is   -> \r\n in -> \r\n !in   -> \r\n !in   -> ; \r\n -> \r\n else \r\n else -> \r\n } \r\n when ( e ) { \r\n - -> foo \r\n } \r\n })


Process finished with exit code 0
